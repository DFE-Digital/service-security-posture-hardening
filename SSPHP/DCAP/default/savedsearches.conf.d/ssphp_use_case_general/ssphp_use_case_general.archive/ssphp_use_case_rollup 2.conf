[ssphp_use_case_rollup]
cron_schedule = */15 * * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_summary_index` ssphp.use_case.id!="*_000" earliest=-1d@d latest=now (ssphp.cis_benchmark.controls.ig1="TRUE" AND ssphp.cis_benchmark.control.level="L1")
      [| search `ssphp_summary_index` ssphp.use_case.id!="*_000" earliest=-1d@d latest=now
        | stats max(SSPHP_RUN) as SSPHP_RUN by ssphp.use_case.id
        | eval search_text="(\"ssphp.use_case.id\"=\"".'ssphp.use_case.id'."\" AND SSPHP_RUN=\"".SSPHP_RUN."\")"
        | stats values(search_text) as search_text
        | eval search_text="(".mvjoin(search_text," OR ").")"
        | return $search_text]
        
| fields ssphp.*

``` Eliminate all the Use Cases which have a current status set to "exclude" ```
```| join type=outer ssphp.use_case.id
    [| search `ssphp_summary_index` ssphp.type="exclusion" earliest=0 latest=now
     | sort 0 - SSPHP_RUN
     | eval ssphp.dfe_benchmark.exclusion.status=case('ssphp.dfe_benchmark.exclusion.status'="TRUE","exclude",
                                                      'ssphp.dfe_benchmark.exclusion.status'="FALSE","include",
                                                      1==1,'ssphp.dfe_benchmark.exclusion.status'),
       ssphp.dfe_benchmark.exclusion.updated=strftime(SSPHP_RUN,"%Y-%m-%d %H:%M:%S")
     | stats list(ssphp.dfe_benchmark.exclusion.*) as *, max(ssphp.dfe_benchmark.exclusion.updated) as last_updated by ssphp.use_case.id
     | eval current_status=mvindex(status,mvfind(updated,'last_updated'))
     | sort 0 ssphp.use_case.id
     | fields ssphp.use_case.id, current_status]

| fillnull value="include" current_status
| search current_status="include"
| fields ssphp.*```

| fillnull value=5 ssphp.risk.expectancy, ssphp.risk.impact
| eval weighting='ssphp.risk.expectancy'*'ssphp.risk.impact'*100/25,
       weighted_score='ssphp.score.score'*'weighting'/100
       
| table ssphp.use_case.id, ssphp.score.score, ssphp.score.color, weighting, weighted_score

| rex field=ssphp.use_case.id "^(?<fs>[^_]*)_(?<grouping>[^_]*)"
| sort 0 fs, grouping

| appendpipe 
    [| search ssphp.use_case.id!="*_000"
     | stats sum(weighted_score) as total_weighted_score,
             sum(weighting) as total_weightings,
             list(ssphp.use_case.id) as ssphp.use_cases.id,
             list(ssphp.score.score) as ssphp.use_cases.score,
             list(ssphp.score.color) as ssphp.use_cases.color
             by fs, grouping
| eval ssphp.use_case.id=fs."_".grouping."_000",
            ssphp.score.score=floor('total_weighted_score'*100/'total_weightings'),
            ssphp.use_case.title="Rollup Metrics for ".upper(fs)." ".upper(grouping)]

| appendpipe 
    [| search ssphp.use_case.id!="*_000"
     | stats sum(weighted_score) as total_weighted_score,
             sum(weighting) as total_weightings,
             list(ssphp.use_case.id) as ssphp.use_cases.id,
             list(ssphp.score.score) as ssphp.use_cases.score,
             list(ssphp.score.color) as ssphp.use_cases.color
             by fs
| eval ssphp.use_case.id=fs."_000",
            ssphp.score.score=floor('total_weighted_score'*100/'total_weightings'),
            ssphp.use_case.title="Rollup Metrics for ".upper(fs)." ".upper(grouping)]

| appendpipe 
    [| search ssphp.use_case.id!="*_000"
     | stats sum(weighted_score) as total_weighted_score,
             sum(weighting) as total_weightings,
             list(ssphp.use_case.id) as ssphp.use_cases.id,
             list(ssphp.score.score) as ssphp.use_cases.score,
             list(ssphp.score.color) as ssphp.use_cases.color
| eval ssphp.use_case.id="FS_000",
            ssphp.score.score=floor('total_weighted_score'*100/'total_weightings'),
            ssphp.use_case.title="Rollup Metrics for All Foundation Services"]

| search ssphp.use_case.id="*_000"

| eval ssphp.score.color=if('ssphp.score.score'=100,"green","red")

| sort 0 ssphp.use_case.id


``` add metadata ```
| eval SSPHP_RUN=round(now()),
       ssphp.use_case.version.number="6.0.0",
       ssphp.use_case.version.last_changed_date="2023-11-01",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.score.threshold.red="-",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.green="99",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="Score is calculated as the weighted average of all the constituent scores, with the weighting based in Impact and Likelihood : ".mvjoin('use_case',", ").". Best=100, Worst=0"

`ssphp_use_case_write`

"""
