[ssphp_use_case_dns_001_cis_1-14]
cron_schedule = */30 * * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """
| `ssphp_use_case_aws("iam_GetCredentialReport")`

| fields _time, SSPHP_RUN, arn, access_key_1_active, access_key_1_last_rotated, access_key_2_active, access_key_2_last_rotated

| eval today=now(),
       access_key_1_last_rotated_epoch=coalesce(floor(strptime(access_key_1_last_rotated,"%Y-%m-%dT%H:%M:%S+00:00")),0),
       access_key_2_last_rotated_epoch=coalesce(floor(strptime(access_key_2_last_rotated,"%Y-%m-%dT%H:%M:%S+00:00")),0),
       days_since_key1_rotated=floor((today-access_key_1_last_rotated_epoch)/60/60/24),
       days_since_key2_rotated=floor((today-access_key_2_last_rotated_epoch)/60/60/24),
       key1_passed=case(access_key_1_active="false",1,days_since_key1_rotated<=45,1,1==1,0),
       key2_passed=case(access_key_2_active="false",1,days_since_key2_rotated<=45,1,1==1,0)

| stats count as ssphp.score.denominator, sum(eval(if(key1_passed=1 AND key2_passed=1,1,0))) as ssphp.score.numerator
| eval ssphp.score.score=floor('ssphp.score.numerator'*100/'ssphp.score.denominator')
| fillnull value=0 ssphp.score.score, ssphp.score.numerator, ssphp.score.denominator

| fields ssphp.score.score, ssphp.score.numerator, ssphp.score.denominator

`ssphp_use_case_write_null_output_override(0)`


``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now()),
       ssphp.use_case.id="dns_001_cis_1-14",

       ssphp.use_case.version.number="1.0.1",
       ssphp.use_case.version.last_changed_date="2024-01-05",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       
       ssphp.microsoft.description=coalesce('description',"-"),
       ssphp.microsoft.implementation_status=coalesce('implementationStatus',"-")

`ssphp_use_case_add_cis_metadata_dns`

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5",
       ssphp.score.ciso_priority="2",
       ssphp.score.scoring_narrative="Score is 100 if control requirements are confirmed, otherwise 0. Best=100, Worst=0",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-"

| eval ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")


`ssphp_use_case_write`

"""
