[ssphp_use_case_aad_002]
cron_schedule = 60 * * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """
index=test sourcetype="users.get"
    [| search index=test sourcetype="users.get"
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]
| rename id as user_id, displayName as user_display_name
| eval assignedPlans=mvdedup('assignedPlans{}.service')

| join type=outer user_id 
    [| search index=test sourcetype="role_management_assignments.get"
        [| search index=test sourcetype="role_management_assignments.get" | stats max(SSPHP_RUN) as SSPHP_RUN | return SSPHP_RUN]
     | rename principalId as user_id, roleDefinitionId as role_definition_id

     | join type=outer role_definition_id 
         [| search index=test sourcetype="role_management.definitions.get"
             [| search index=test sourcetype="role_management.definitions.get" | stats max(SSPHP_RUN) as SSPHP_RUN | return SSPHP_RUN]
              | rename id as role_definition_id, displayName as role_display_name
              | table role_definition_id, description, role_display_name, rolePermissions{}.allowedResourceActions{}, inheritsPermissionsFrom{}.id, inheritsPermissionsFrom@odata.context, isBuiltIn, isEnabled, isPrivileged, resourceScopes{}]
    ]
| table user_id, user_display_name, isPrivileged
     
| join type=outer user_id max=0
    [| search index=test sourcetype="SSPHP.conditional_access_policy.affected_users"
         [| search index=test sourcetype="SSPHP.conditional_access_policy.affected_users" | stats max(SSPHP_RUN) as SSPHP_RUN | return SSPHP_RUN]
    | rename affected_users{} as user_id, displayName as policy_display_name
    | fillnull value="none" user_id
    | mvexpand user_id
    | table user_id, capId, policy_display_name]

| fields user_id, user_display_name, capId, policy_display_name, isPrivileged
| stats values(isPrivileged) as isPrivileged, list(capId) as capId, list(policy_display_name) as policy_display_name by user_id, user_display_name
| fillnull value="false" isPrivileged
| search isPrivileged="true" AND capId!="484d95fb-43fe-4daa-95a7-9adbcdbd8595"

| append 
    [| makeresults
    | eval type="my count record"
    | fields - _time]
    
| eventstats count

| search type="my count record"
| eval ssphp.score=100-(10*(count-1))
| fields ssphp.score

``` add metadata ```
| eval SSPHP_RUN=round(now()),
       ssphp.use_case.id="aad_002",
       ssphp.use_case.description="This use case is the number of privileged AD accounts that do not have a specific conditional access policy",
       ssphp.use_case.version="1.0.0",
       ssphp.use_case.last_changed.date="2023-07-24",
       ssphp.use_case.last_changed.by="Ian Pearl",
       ssphp.use_case.treshhold.red="90",
       ssphp.use_case.treshhold.orange="90",
       ssphp.use_case.treshhold.green="90",
       ssphp.color=case('ssphp.score'<'ssphp.use_case.treshhold.red',"red",1==1,"green")

| makejson SSPHP_RUN, ssphp* output=_raw
| fields _raw

```| spath input=json```
| collect output_format=hec testmode=f addinfo=f index="ssphp_metrics"

"""
