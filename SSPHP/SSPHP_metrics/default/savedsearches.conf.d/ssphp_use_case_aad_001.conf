[ssphp_use_case_aad_001]
cron_schedule = 60 * * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """
index=test sourcetype="users.get"
    [| search index=test sourcetype="users.get"
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]
| rename id as user_id, displayName as user_display_name
| eval assignedPlans=mvdedup('assignedPlans{}.service')

| join type=outer user_id 
    [| search index=test sourcetype="role_management_assignments.get"
        [| search index=test sourcetype="role_management_assignments.get" | stats max(SSPHP_RUN) as SSPHP_RUN | return SSPHP_RUN]
     | rename principalId as user_id, roleDefinitionId as role_definition_id

     | join type=outer role_definition_id 
         [| search index=test sourcetype="role_management.definitions.get"
             [| search index=test sourcetype="role_management.definitions.get" | stats max(SSPHP_RUN) as SSPHP_RUN | return SSPHP_RUN]
              | rename id as role_definition_id, displayName as role_display_name
              | table role_definition_id, description, role_display_name, rolePermissions{}.allowedResourceActions{}, inheritsPermissionsFrom{}.id, inheritsPermissionsFrom@odata.context, isBuiltIn, isEnabled, isPrivileged, resourceScopes{}]
    ]

| table user_id, user_display_name, userPrincipalName, givenName, surname, assignedPlans, role_definition_id, role_display_name, description, rolePermissions{}.allowedResourceActions{}, inheritsPermissionsFrom{}.id, isBuiltIn, isEnabled, isPrivileged
| search isPrivileged="true" AND assignedPlans="*MultiFactorService*"
| stats count
| eval ssphp.score=100-(10*count)
| fields ssphp.score

``` add metadata ```
| eval SSPHP_RUN=round(now()),
       ssphp.use_case.id="aad_001",
       ssphp.use_case.description="This use case is the number of privileged AD accounts that do not have MFA enabled",
       ssphp.use_case.version="1.0.0",
       ssphp.use_case.last_changed.date="2023-07-20",
       ssphp.use_case.last_changed.by="Ian Pearl",
       ssphp.use_case.treshhold.red="89",
       ssphp.use_case.treshhold.orange="89",
       ssphp.use_case.treshhold.green="89",
       ssphp.color=case('ssphp.score'>'ssphp.use_case.treshhold.red',"red",'ssphp.score'>'ssphp.use_case.treshhold.orange',"orange",1==1,"green")

| makejson SSPHP_RUN, ssphp* output=_raw
| fields _raw

```| spath input=json```
| collect output_format=hec testmode=f addinfo=f index="ssphp_metrics"

"""
