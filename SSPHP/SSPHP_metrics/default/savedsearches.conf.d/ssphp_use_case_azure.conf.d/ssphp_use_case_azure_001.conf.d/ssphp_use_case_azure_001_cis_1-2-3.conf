[ssphp_use_case_azure_001_cis_1-2-3]
cron_schedule = */30 * * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """
| `ssphp_use_case_msgraph("/v1.0/identity/conditionalAccess/policies")`

| fields id, displayName, state, conditions.users.includeGroups{}, conditions.clientAppTypes{}, grantControls.builtInControls{}


``` NOTE : the above condition uses guids that I surmised by looking at the data but these are inevitably not the actual guid of the admin groups.
       when it comes to finding the real guids that we need to be looking for then we will not be able to hard code them here (Github) so
       we will need to create a lookup in the private app and look in there```

```| eval ssphp.score.numerator=if(match('conditions.users.includeGroups{}',".*-47ee-.*") OR match('conditions.users.includeGroups{}',".*-91d1-.*"),1,0),
       ssphp.score.numerator=if(upper('state')="ENABLED",'ssphp.score.numerator'+1,'ssphp.score.numerator'),
       ssphp.score.numerator=if(upper('conditions.clientAppTypes{}')="ALL",'ssphp.score.numerator'+1,'ssphp.score.numerator'),
       ssphp.score.numerator=if(upper('grantControls.builtInControls{}')="MFA",'ssphp.score.numerator'+1,'ssphp.score.numerator')```

| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if(match('conditions.users.includeGroups{}',".*-47ee-.*") OR match('conditions.users.includeGroups{}',".*-91d1-.*"),'ssphp.score.non_compliant_fields',mvappend('ssphp.score.non_compliant_fields',"conditions.users.includeGroups{}")),
       ssphp.score.non_compliant_fields=if(upper('state')="ENABLED",'ssphp.score.non_compliant_fields', mvappend('ssphp.score.non_compliant_fields',"state")),
       ssphp.score.non_compliant_fields=if(upper('conditions.clientAppTypes{}')="ALL",'ssphp.score.non_compliant_fields', mvappend('ssphp.score.non_compliant_fields',"conditions.clientAppTypes{}")),
       ssphp.score.non_compliant_fields=if(upper('grantControls.builtInControls{}')="MFA",'ssphp.score.non_compliant_fields', mvappend('ssphp.score.non_compliant_fields',"grantControls.builtInControls{}"))

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="4",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| fields id, displayName, state, conditions.users.includeGroups{}, conditions.clientAppTypes{}, grantControls.builtInControls{}, ssphp.score.score, ssphp.score.numerator, ssphp.score.denominator, ssphp.score.non_compliant_fields

``` ##################### end dashboard query ##################### ```


| stats max(ssphp.score.score) as ssphp.score.score, min(ssphp.score.numerator) as ssphp.score.numerator, max(ssphp.score.denominator) as ssphp.score.denominator

`ssphp_use_case_write_null_output_override(0)`


``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now()),
       ssphp.use_case.id="azure_001_cis_1-2-3",

       ssphp.use_case.version.number="3.0.1",
       ssphp.use_case.version.last_changed_date="2024-01-05",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       
       ssphp.microsoft.description=coalesce('description',"-"),
       ssphp.microsoft.implementation_status=coalesce('implementationStatus',"-")

`ssphp_use_case_add_cis_metadata_azure`

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5",
       ssphp.score.ciso_priority="3",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-"


| eval ssphp.score.scoring_narrative="In order to be compliant, at least 1 Conditional Access Policy needs to exist that has all of the following:~~
state = enabled~~
conditions.users.includeGroups{} = *-47ee-* OR *-91d1-*~~
conditions.clientAppTypes{} = all~~
grantControls.builtInControls{} = mfa~~
Any CAP with all of these will have ssphp.score.score = 100. Only 1 needs to exist for compliance.~~
The field ssphp.score.numerator indicates how many of the conditions were compiant for each CAP"

| eval ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")


`ssphp_use_case_write`

"""
