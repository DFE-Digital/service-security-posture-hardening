[ssphp_use_case_m365_001_cis_1-1-14]
cron_schedule = */30 * * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """
| `ssphp_use_case_m365_cis_secure_score("UserRiskPolicy")`

| rex field=implementationStatus "You have (?<numerator>[^\s]*) users out of (?<denominator>[^\s]*) that do not have user risk policy enabled"

| eval ssphp.score.numerator=numerator, 
       ssphp.score.denominator=denominator,
       ssphp.score.score=floor((denominator-numerator)*100/denominator)
| fillnull value=0 ssphp.score.score
| fillnull value="-" ssphp.score.numerator, ssphp.score.denominator
| fields ssphp.score.score, ssphp.score.numerator, ssphp.score.denominator, description, implementationStatus


``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now()),
       ssphp.use_case.id="m365_001_cis_1-1-14",

       ssphp.use_case.version.number="2.0.1",
       ssphp.use_case.version.last_changed_date="2023-12-18",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.notes="This control has been implemented using the Secure Score API, so MS gives us it's verdict as to whether Users have all got an asscoaited RiskPolicy. This is different from the method recommended in the CIS Benchmark which requires us to get the data from the Conditional Access Policies. We are unable to check how MS get to their conclusion, so we have chosen to go forward by working on the assumption that MS is correct.",
       
       ssphp.microsoft.description=coalesce('description',"-"),
       ssphp.microsoft.implementation_status=coalesce('implementationStatus',"-")

`ssphp_use_case_add_cis_metadata_m365`

```| eval ssphp.use_case.control=coalesce('ssphp.use_case.control','ssphp.cis_benchmark.control.title',"-"),
       ssphp.use_case.description=coalesce('ssphp.use_case.description','ssphp.cis_benchmark.control.description',"-")```
| eval ssphp.use_case.short_description="-",
       ssphp.risk.expectancy="5",
       ssphp.risk.impact="5",
       ssphp.score.ciso_priority="-",
       ssphp.score.scoring_narrative="Score is 100 if control requirements are confirmed, otherwise 0. Best=100, Worst=0",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-"

| eval ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")


`ssphp_use_case_write`

"""
