[ssphp_write_findings_summary__github_repo_made_public]
cron_schedule = 30 * * * *
description = A Github Repo was made Public
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """
`github_index` action="publicized"

| eval ssphp_action='action',
       ssphp_created_at='last_updated',
       ssphp_details=mvappend("User Login = ".'sender.login', "User URL = ".'sender.url'),
       ssphp_severity="high",
       ssphp_repository='repository.full_name',
       ssphp_state='alert.state',
       ssphp_url='alert.security_advisory.references{}.url',
       ssphp_original_event=_time."~~~".md5(_raw)

| lookup ssphp_github_repo_service_map.csv ssphp_org as "organization.login", ssphp_repo as "repository.name" OUTPUT ssphp_level_1_display_name, ssphp_level_2_display_name, ssphp_service_team
| fillnull value="unknown" ssphp_level_1_display_name, ssphp_level_2_display_name, ssphp_service_team

``` Normalised field data ```
| eval ssphp_norm_time="Creation Time = ".'ssphp_created_at',
       ssphp_norm_sort_time=round(strptime('ssphp_created_at',"%Y-%m-%d %H:%M:%S")),
       ssphp_norm_tech_source="Github",
       ssphp_norm_use_case="Repo Made Public",
       ssphp_norm_resource_parent="Organisation = ".'organization.login',
       ssphp_norm_resource="Repo = ".'repository.name',
       ssphp_norm_title="Github Repo as been made Public",
       ssphp_norm_description='ssphp_details',
       ssphp_norm_remediation="unknown",
       ssphp_norm_severity=upper(substr(ssphp_severity,1,1)).substr(ssphp_severity,2),
       ssphp_norm_impact="unknown",
       ssphp_norm_status=mvappend("Action=".'ssphp_action',"State=".'ssphp_state'),
       ssphp_norm_ownership=mvappend("DfE Group = ".ssphp_level_1_display_name,"DfE Service = ".ssphp_level_2_display_name),
       ssphp_norm_contact=case(isnotnull(ssphp_level_1_display_name),"Service Team = ".ssphp_service_team,1==1,"unknown"),
       ssphp_norm_link="unknown",
       ssphp_norm_original_events='ssphp_original_event',
       SSPHP_RUN=now()

| lookup ssphp_github_public_repo_list.csv ssphp_organisation as organization.login, ssphp_repo as repository.name OUTPUT full_name
| eval ssphp_norm_resource=case(isnull(full_name),ssphp_norm_resource." (private)",1==1,ssphp_norm_resource." (public)")

| table SSPHP_RUN, ssphp_norm_*, ssphp_*

`ssphp_write_summary_findings_data`
"""
