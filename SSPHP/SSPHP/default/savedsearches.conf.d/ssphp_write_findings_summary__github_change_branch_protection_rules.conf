[ssphp_write_findings_summary__github_change_branch_protection_rules]
cron_schedule = 30 * * * *
description = Branch Protection Rules were changed for a Repo
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """
`github_index` rule.name=*

| eval ssphp_action='action',
       ssphp_created_at='last_updated',
       ssphp_details=mvappend("Rule = ".'rule.name', "Name Changed From = ".'changes.name.from', "Merge Queue Enforcement Level From = ".'changes.merge_queue_enforcement_level.from', "Deployment Changes Required Enforcement Level = ".'changes.required_deployments_enforcement_level.from'),
       ssphp_severity='alert.security_advisory.severity',
       ssphp_repository='repository.full_name',
       ssphp_state='alert.state',
       ssphp_url='alert.security_advisory.references{}.url',
       ssphp_original_event=_time."~~~".md5(_raw)

| lookup ssphp_github_repo_service_map.csv ssphp_org as "organization.login", ssphp_repo as "repository.name" OUTPUT ssphp_level_1_display_name, ssphp_level_2_display_name, ssphp_service_team
| fillnull value="unknown" ssphp_level_1_display_name, ssphp_level_2_display_name, ssphp_service_team

``` Normalised field data ```
| eval ssphp_norm_time="Last Updated = ".'ssphp_created_at',
       ssphp_norm_sort_time=round(strptime('ssphp_created_at',"%Y-%m-%d %H:%M:%S")),
       ssphp_norm_tech_source="Github",
       ssphp_norm_use_case="Change Branch Protection Rules",
       ssphp_norm_resource_parent="Organisation = ".'organization.login',
       ssphp_norm_resource="Repo = ".'repository.name',
       ssphp_norm_title="Branch Protection Rules have been changed for a Github Repo",
       ssphp_norm_description='ssphp_details',
       ssphp_norm_remediation="unknown",
       ssphp_norm_severity="medium",
       ssphp_norm_impact="unknown",
       ssphp_norm_status='ssphp_state',
       ssphp_norm_ownership=mvappend("DfE Group = ".ssphp_level_1_display_name,"DfE Service = ".ssphp_level_2_display_name),
       ssphp_norm_contact=case(isnotnull(ssphp_level_1_display_name),"Service Team = ".ssphp_service_team,1==1,"unknown"),
       ssphp_norm_link="unknown",
       ssphp_norm_original_events='ssphp_original_event',
       SSPHP_RUN=now()

| lookup ssphp_github_public_repo_list.csv ssphp_organisation as organization.login, ssphp_repo as repository.name OUTPUT full_name
| eval ssphp_norm_resource=case(isnull(full_name),ssphp_norm_resource." (private)",1==1,ssphp_norm_resource." (public)")

``` Work up the details field ```
| rename rule.name as rule_name

| foreach changes.*.from
    [eval <<FIELD>>="To : ".'<<FIELD>>'.", From : ".'rule.<<MATCHSTR>>']
| rename changes.*.from as t_*

| foreach t_*
    [eval f="<<FIELD>>",
          f=replace(f,"^t_",""),
          f=replace(f,"_"," ")
     | rex field=f mode=sed "s/^/ / s/ [aA]/ A/g s/ [bB]/ B/g s/ [cC]/ C/g s/ [dD]/ D/g s/ [eE]/ E/g s/ [fF]/ F/g s/ [gG]/ G/g s/ [hH]/ H/g s/ [iI]/ I/g s/ [jJ]/ J/g s/ [kK]/ K/g s/ [lL]/ L/g s/ [mM]/ M/g s/ [nN]/ N/g s/ [oO]/ O/g s/ [pP]/ P/g s/ [qQ]/ Q/g s/ [rR]/ R/g s/ [sS]/ S/g s/ [tT]/ T/g s/ [uU]/ U/g s/ [vV]/ V/g s/ [wW]/ W/g s/ [xX]/ X/g s/ [yY]/ Y/g s/ [zZ]/ Z/g s/^.//"
     | eval all_changes=if("<<FIELD>>"!="rule_name",mvappend(all_changes,f." = ".'<<FIELD>>'),all_changes)]
| where isnotnull(all_changes)
| eval all_changes=mvappend("Rule = ".'rule_name', all_changes)
| rename all_changes as ssphp_norm_description
| fields ssphp_norm_*, ssphp_*, *
| table SSPHP_RUN, ssphp_norm_*, ssphp_*

`ssphp_write_summary_findings_data`
"""
