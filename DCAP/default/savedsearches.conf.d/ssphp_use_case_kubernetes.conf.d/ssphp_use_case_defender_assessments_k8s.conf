[ssphp_use_case_defender_assessments_k8s{{environment}}]
cron_schedule = 30 3 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_metrics_data_index{{environment}}` sourcetype="azure_resource_graph" type="microsoft.security/assessments*" earliest=-1d@d latest=now
    [| search `ssphp_metrics_data_index{{environment}}` sourcetype="azure_resource_graph" type="microsoft.security/assessments*" earliest=-1d@d latest=now
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]

| spath id
| spath properties
| spath type
| spath name
| spath tenantId
| spath subscriptionId
| spath resourceGroup
| spath properties.resourceDetails.ResourceType
| spath properties.additionalData.subAssessmentsLink

| fields id, properties, type, name, tenantId, subscriptionId, resourceGroup, properties.resourceDetails.ResourceType, properties.additionalData.subAssessmentsLink
| fields - _raw, _time

```only for kubernetes-related assessments```
| search properties.resourceDetails.ResourceType IN (".containerimage","Container","acr.containerimage","microsoft.containerregistry/registries","microsoft.containerservice/managedclusters","microsoft.containerservice/managedclusters/securityentitydata","registries")

| eval src=if(match('type',"^microsoft\.security\/assessments$"),"assessment","sub_assessment")
| eval {src}.properties='properties'
| fields - properties

| eval assessment_id=replace('id',"/subassessments/[0-9a-f-]{36}$","")
| lookup local=true ssphp_k8s_assessment_enrichment_lookup.csv lookup_assessment.id as assessment_id OUTPUTNEW lookup_assessment.properties as assessment.properties

```remove the original assessment events that pointed to the sub-assessment because we will have added the assessment data to the sub-assessment events themselves```
| search NOT (type="microsoft.security/assessments" AND properties.additionalData.subAssessmentsLink="*")

| fields type, id, name, tenantId, subscriptionId, resourceGroup, assessment.properties, sub_assessment.properties


```===== GOT THE ASSESSMENT & SUB-ASSESSMENT DATA BANGED TOGETHER, NOW MAKE THE FIELDS =======```

| spath input=assessment.properties
| rename * as zzz.*,
         zzz.id as id, zzz.type as type, zzz.tenantId as tenantId, zzz.name as name, zzz.subscriptionId as subscriptionId, zzz.resourceGroup as resourceGroup
         zzz.sub_assessment.properties as sub_assessment.properties
| fields - zzz.assessment.properties, zzz.assessment.properties_raw

| spath input=sub_assessment.properties
| rename * as yyy.*,
         yyy.id as id, yyy.type as type, yyy.tenantId as tenantId, yyy.name as name, yyy.subscriptionId as subscriptionId, yyy.resourceGroup as resourceGroup
         yyy.zzz.* as zzz.*
| fields - yyy.sub_assessment.properties, yyy.sub_assessment.properties_raw

| rename zzz.* as def.assessment.assessment.properties.*,
         yyy.* as def.assessment.sub_assessment.properties.*


```================================ NORMALISE FIELDS ===============================```
| rename *{}* as **
| rename *{}* as **
| rename *{}* as **

| eval cr="
"
 
| rename type as ssphp.assessment.type,
         id as ssphp.assessment.id,
         name as ssphp.assessment.name,
         tenantId as ssphp.resource.tenant,
         subscriptionId as ssphp.resource.subscription,
         resourceGroup as ssphp.resource.resource_group
        
| eval ssphp.assessment.title=trim(mvjoin(mvdedup(mvappend('def.assessment.assessment.properties.displayName','def.assessment.assessment.properties.metadata.displayName','def.assessment.sub_assessment.properties.displayName','def.assessment.sub_assessment.properties.additionalData.softwareDetails.fixReference.description','def.assessment.assessment.properties.status.description')),'cr'.'cr')),
       ssphp.assessment.description=trim(mvjoin(mvdedup(mvappend('def.assessment.assessment.properties.metadata.description','def.assessment.sub_assessment.properties.description','def.assessment.sub_assessment.properties.additionalData.cveDescriptionAdditionalInformation','def.assessment.sub_assessment.properties.additionalData.vulnerabilityDetails.references{}.title')),'cr'.'cr')),
       ssphp.assessment.remediation=trim(mvjoin(mvdedup(mvappend('def.assessment.sub_assessment.properties.remediation','def.assessment.assessment.properties.metadata.remediationDescription','def.assessment.assessment.properties.metadata.remediationPolicy')),'cr'.'cr')),
       ssphp.assessment.impact=trim(mvjoin(mvdedup(mvappend('def.assessment.sub_assessment.properties.impact','def.assessment.assessment.properties.metadata.implementationEffort')),'cr'.'cr')),
       ssphp.assessment.title=trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace('ssphp.assessment.title',"Summary:",""),"\[Generated by AI\]",""),"<br>",""),"</p>",""),"\[Preview\] ",""),"<ol><li>",""),"</li></ol>",""),"<a target=\"_blank\" href=\"",""),"</a>",""),"<p>",""),"\">"," "),"<ul>",""),"</ul>","")),
       ssphp.assessment.description=trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace('ssphp.assessment.description',"Summary:",""),"\[Generated by AI\]",""),"<br>",""),"</p>",""),"\[Preview\] ",""),"<ol><li>",""),"</li></ol>",""),"<a target=\"_blank\" href=\"",""),"</a>",""),"<p>",""),"\">"," "),"<ul>",""),"</ul>",""),"</b>",""),"<li>",""),"</li>",""),"<a href=\'",""),"\'>"," ")),
       ssphp.assessment.remediation=trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace('ssphp.assessment.remediation',"Summary:",""),"\[Generated by AI\]",""),"<br>",""),"</p>",""),"\[Preview\] ",""),"<ol><li>",""),"</li></ol>",""),"<a target=\"_blank\" href=\"",""),"</a>",""),"<p>",""),"\">"," "),"<ul>",""),"</ul>","")),
       ssphp.assessment.impact=trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace('ssphp.assessment.impact',"Summary:",""),"\[Generated by AI\]",""),"<br>",""),"</p>",""),"\[Preview\] ",""),"<ol><li>",""),"</li></ol>",""),"<a target=\"_blank\" href=\"",""),"</a>",""),"<p>",""),"\">"," "),"<ul>",""),"</ul>",""))

| eval ssphp.assessment.status.status=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.code','def.assessment.assessment.properties.status.code')),
       ssphp.assessment.status.status=case(mvcount(mvfilter(match(lower('ssphp.assessment.status.status'),"unhealthy")))>0,"Unhealthy",
                                    mvcount(mvfilter(match(lower('ssphp.assessment.severity'),"notapplicable")))>0,"NotApplicable",
                                    1==1,"Healthy"),

       ssphp.assessment.status.cause=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.cause','def.assessment.assessment.properties.status.cause')),
       ssphp.assessment.status.description=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.description','def.assessment.assessment.properties.status.description')),
       ssphp.assessment.category=mvdedup(mvappend('def.assessment.sub_assessment.properties.category','def.assessment.assessment.properties.metadata.categories'))

| eval ssphp.assessment.severity=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.severity','def.assessment.assessment.properties.status.severity','def.assessment.assessment.properties.metadata.severity','def.assessment.sub_assessment.properties.status.severity')),
       ssphp.assessment.severity=case(mvcount(mvfilter(match(lower('ssphp.assessment.severity'),"critical")))>0,"Critical",
                                      mvcount(mvfilter(match(lower('ssphp.assessment.severity'),"high")))>0,"High",
                                      mvcount(mvfilter(match(lower('ssphp.assessment.severity'),"medium")))>0,"Medium",
                                      mvcount(mvfilter(match(lower('ssphp.assessment.severity'),"low")))>0,"Low",
                                      1==1,"Low")

| eval ssphp.resource.id=mvjoin(mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.id','def.assessment.assessment.properties.resourceDetails.id','def.assessment.assessment.properties.resourceDetails.ResourceId','def.assessment.sub_assessment.properties.resourceDetails.ResourceId','def.assessment.assessment.properties.resourceDetails.NativeResourceId','def.assessment.sub_assessment.properties.resourceDetails.NativeResourceId')),'cr'),

       ssphp.resource.name=mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.ResourceName','def.assessment.assessment.properties.resourceDetails.ResourceName')),
       ssphp.resource.type=mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.ResourceType','def.assessment.assessment.properties.resourceDetails.ResourceType')),
       ssphp.resource.provider=mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.ResourceProvider','def.assessment.assessment.properties.resourceDetails.ResourceProvider'))

| rename def.assessment.sub_assessment.properties.additionalData.kubernetesDetails.* as ssphp.resource.kubernetesDetails.*,
         def.assessment.sub_assessment.properties.additionalData.artifactDetails.* as ssphp.resource.artifactDetails.*,
         def.assessment.sub_assessment.properties.additionalData.softwareDetails.* as ssphp.resource.softwareDetails.*,
         def.assessment.sub_assessment.properties.additionalData.vulnerabilityDetails.* as ssphp.assessment.vulnerabilityDetails.*,
         def.assessment.sub_assessment.properties.additionalData.* as ssphp.assessment.detail.*,
         def.assessment.assessment.properties.risk.* as ssphp.assessment.risk.*,
         def.assessment.assessment.properties.statusPerInitiative.assessmentStatus.* as ssphp.assessment.status.PerInitiative.*,
         def.assessment.assessment.properties.statusPerInitiative.* as ssphp.assessment.status.PerInitiative.*,
         def.assessment.assessment.properties.status.firstEvaluationDate as ssphp.assessment.status.firstEvaluationDate,
         def.assessment.assessment.properties.status.statusChangeDate as ssphp.assessment.status.statusChangeDate

``` leaving these fields with original names breaks the mkjson```
| rename ssphp.assessment.vulnerabilityDetails.cvss.2.0 as ssphp.assessment.vulnerabilityDetails.cvss.20, 
         ssphp.assessment.vulnerabilityDetails.cvss.3.0 as ssphp.assessment.vulnerabilityDetails.cvss.30, 
         ssphp.assessment.vulnerabilityDetails.cvss.4.0 as ssphp.assessment.vulnerabilityDetails.cvss.40, 
         ssphp.assessment.vulnerabilityDetails.cvss.2.0.base as ssphp.assessment.vulnerabilityDetails.cvss.20base,
         ssphp.assessment.vulnerabilityDetails.cvss.3.0.base as ssphp.assessment.vulnerabilityDetails.cvss.30base,
         ssphp.assessment.vulnerabilityDetails.cvss.4.0.base as ssphp.assessment.vulnerabilityDetails.cvss.40base,
         ssphp.assessment.vulnerabilityDetails.cvss.2.0.cvssVectorString as ssphp.assessment.vulnerabilityDetails.cvss.20cvssVectorString,
         ssphp.assessment.vulnerabilityDetails.cvss.3.0.cvssVectorString as ssphp.assessment.vulnerabilityDetails.cvss.30cvssVectorString,
         ssphp.assessment.vulnerabilityDetails.cvss.4.0.cvssVectorString as ssphp.assessment.vulnerabilityDetails.cvss.40cvssVectorString


`ssphp_add_service_metadata_k8s{{environment}}`

``` add the subscription name ```
| join type=outer ssphp.resource.subscription
    [| search index="ssphp_asset_inventory_DEV" ssphp.resource.source="AZURE" earliest=-1d@d latest=now
     | stats latest(ssphp.resource.subscription_name) as ssphp.resource.subscription_name by ssphp.resource.subscription
     | table ssphp.resource.subscription, ssphp.resource.subscription_name]


``` ##################### replace with dashboard filter ##################### ```


``` ##################### end dashboard query ##################### ```

| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id='ssphp.assessment.name',
       ssphp.use_case.title="Microsoft Defender Kubernetes Assessment [".'ssphp.assessment.name'."]",
       ssphp.use_case.savedsearch="ssphp_use_case_defender_assessments_k8s{{environment}}",
       ssphp.use_case.group="AZURE",
       ssphp.use_case.group_name="MS-DEFENDER",
       ssphp.use_case.version.number="2.1.3",
       ssphp.use_case.version.last_changed_date="2025-06-26",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.category="KUBERNETES",
       ssphp.assessment.source="Defender"

| eval ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ```ssphp.score.ciso_priority=case(lower('ssphp.assessment.severity')="critical","1",
                                      lower('ssphp.assessment.severity')="high","2",
                                      lower('ssphp.assessment.severity')="medium","3",
                                      1==1,"4"),```
       ssphp.score.scoring_narrative="In order to be compliant, the value of ssphp.assessment.status MUST be 'Healthy' for each of the Resources listed."

| lookup local=true ssphp_defender_assessment_priorities.csv assessment_id as ssphp.assessment.name OUTPUT ciso_priority as ssphp.score.ciso_priority
| fillnull value="1" ssphp.score.ciso_priority
| eval ssphp.score.ciso_priority=if('ssphp.score.ciso_priority'>2,3,'ssphp.score.ciso_priority')

| fields SSPHP_RUN, ssphp.*

| eval ssphp.score.score=case(mvcount(mvfilter(match(lower('ssphp.assessment.status.status'),"unhealthy")))>0,0,
                              mvcount(mvfilter(match(lower('ssphp.assessment.status.status'),"healthy")))>0,100,
                              mvcount(mvfilter(match(lower('ssphp.assessment.status.status'),"notapplicable")))>0,100,
                              1==1,0),
       ssphp.score.color=if('ssphp.score.score'>'ssphp.score.threshold.green',"green","red"),
       ssphp.score.color=case('ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="1","red",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="2","orange",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="3","white",
                              1==1,'ssphp.score.color')

| eval ssphp.risk.expectancy="-",
       ssphp.risk.impact="-",
       ssphp.score.remediation_priority=(5-'ssphp.score.ciso_priority')*(abs('ssphp.score.score'-100) / 100)


| eval SSPHP_UID=md5('ssphp.use_case.category'."|".'ssphp.service.id'."|".'ssphp.use_case.id'."|".'ssphp.resource.id')


| fields SSPHP_RUN, SSPHP_UID, ssphp.*


`ssphp_use_case_write{{environment}}`


"""


