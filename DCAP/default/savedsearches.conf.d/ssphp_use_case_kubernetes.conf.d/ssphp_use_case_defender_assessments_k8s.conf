[ssphp_use_case_defender_assessments_k8s{{environment}}]
cron_schedule = 30 3 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_metrics_data_index{{environment}}` sourcetype="azure_resource_graph" type="microsoft.security/assessments*" earliest=-1d@d latest=now
    [| search `ssphp_metrics_data_index{{environment}}` sourcetype="azure_resource_graph" type="microsoft.security/assessments*" earliest=-1d@d latest=now
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]

| spath id
| spath properties
| spath type
| spath tenantId
| spath subscriptionId
| spath resourceGroup
| spath properties.resourceDetails.ResourceType
| spath properties.additionalData.subAssessmentsLink

```only for kubernetes-related assessments```
| search properties.resourceDetails.ResourceType IN (".containerimage","Container","acr.containerimage","microsoft.containerregistry/registries","microsoft.containerservice/managedclusters","microsoft.containerservice/managedclusters/securityentitydata","registries")

| eval src=if(match('type',"^microsoft\.security\/assessments$"),"assessment","sub_assessment")
| eval {src}.properties=properties
| fields - properties

| eval assessment_id=replace('id',"/subassessments/[0-9a-f-]{36}$","")

| lookup local=true ssphp_k8s_assessment_enrichment_lookup.csv lookup_assessment.id as assessment_id

```remove the original assessment events that pointed to the sub-assessment because we will have added the assessment data to the sub-assessment events themselves```
| search NOT (type="microsoft.security/assessments" AND properties.additionalData.subAssessmentsLink="*")

| eval assessment.properties=mvdedup(if(isnull('assessment.properties') OR 'assessment.properties'="",'lookup_assessment.properties','assessment.properties'))
| fields - lookup_assessment.properties

```| spath input=assessment.properties path=resourceDetails.ResourceName output=assessment.properties.resourceDetails.ResourceName
| spath input=sub_assessment.properties path=additionalData.kubernetesDetails.clusterName output=sub_assessment.properties.additionalData.kubernetesDetails.clusterName```

| table type, id, tenantId, subscriptionId, resourceGroup, assessment.properties, sub_assessment.properties

| spath input=assessment.properties
| rename * as zzz.*,
         zzz.id as id, zzz.type as type, zzz.tenantId as tenantId, zzz.subscriptionId as subscriptionId, zzz.resourceGroup as resourceGroup
         zzz.sub_assessment.properties as sub_assessment.properties
| fields - zzz.assessment.properties, zzz.assessment.properties_raw

| spath input=sub_assessment.properties
| rename * as yyy.*,
         yyy.id as id, yyy.type as type, yyy.tenantId as tenantId, yyy.subscriptionId as subscriptionId, yyy.resourceGroup as resourceGroup
         yyy.zzz.* as zzz.*
| fields - yyy.sub_assessment.properties, yyy.sub_assessment.properties_raw

| rename zzz.* as def.assessment.assessment.properties.*,
         yyy.* as def.assessment.sub_assessment.properties.*


```================================ NORMALISE FIELDS ===============================```
| rename *{}* as **
| rename *{}* as **
| rename *{}* as **
 
| rename type as ssphp.assessment.type,
         id as ssphp.assessment.id,
         tenantId as ssphp.resource.tenant,
         subscriptionId as ssphp.resource.subscription,
         resourceGroup as ssphp.resource.resource_group,
       
         def.assessment.sub_assessment.properties.additionalData.kubernetesDetails.* as ssphp.resource.kubernetesDetails.*,
         def.assessment.sub_assessment.properties.additionalData.artifactDetails.* as ssphp.resource.artifactDetails.*,
         def.assessment.sub_assessment.properties.additionalData.softwareDetails.* as ssphp.resource.softwareDetails.*,
         def.assessment.sub_assessment.properties.additionalData.vulnerabilityDetails.* as ssphp.assessment.vulnerabilityDetails.*,
         def.assessment.sub_assessment.properties.additionalData.* as ssphp.assessment.detail.*,
         def.assessment.assessment.properties.risk.* as ssphp.assessment.risk.*,
         def.assessment.assessment.properties.statusPerInitiative.assessmentStatus.* as ssphp.assessment.status.PerInitiative.*,
         def.assessment.assessment.properties.statusPerInitiative.* as ssphp.assessment.status.PerInitiative.*,
         def.assessment.assessment.properties.status.firstEvaluationDate as ssphp.assessment.status.firstEvaluationDate,
         def.assessment.assessment.properties.status.statusChangeDate as ssphp.assessment.status.statusChangeDate
        
| eval def.assessment.sub_assessment.properties.description=trim(replace(replace('def.assessment.sub_assessment.properties.description',"Summary:",""),"\[Generated by AI\]","")),
       ssphp.assessment.description=mvdedup(mvappend('def.assessment.sub_assessment.properties.description','def.assessment.sub_assessment.properties.metadata.description','def.assessment.assessment.properties.metadata.description')),
       ssphp.assessment.title=mvdedup(mvappend('def.assessment.sub_assessment.properties.displayName','ssphp.resource.artifactDetails.displayName','def.assessment.sub_assessment.properties.metadata.displayName','def.assessment.assessment.properties.metadata.displayName'))
     
| eval ssphp.resource.id=mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.id','def.assessment.assessment.properties.resourceDetails.id','def.assessment.assessment.properties.resourceDetails.ResourceId','def.assessment.sub_assessment.properties.resourceDetails.ResourceId','def.assessment.assessment.properties.resourceDetails.NativeResourceId','def.assessment.sub_assessment.properties.resourceDetails.NativeResourceId')),
       ssphp.resource.name=mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.ResourceName','def.assessment.assessment.properties.resourceDetails.ResourceName')),
       ssphp.resource.type=mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.ResourceType','def.assessment.assessment.properties.resourceDetails.ResourceType')),
       ssphp.resource.provider=mvdedup(mvappend('def.assessment.sub_assessment.properties.resourceDetails.ResourceProvider','def.assessment.assessment.properties.resourceDetails.ResourceProvider')),
      
       ssphp.assessment.status.cause=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.cause','def.assessment.assessment.properties.status.cause')),
       ssphp.assessment.status.code=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.code','def.assessment.assessment.properties.status.code')),
       ssphp.assessment.status.description=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.description','def.assessment.assessment.properties.status.description')),
       ssphp.assessment.status.severity=mvdedup(mvappend('def.assessment.sub_assessment.properties.status.severity','def.assessment.assessment.properties.status.severity')),
      
       ssphp.assessment.category=mvdedup(mvappend('def.assessment.sub_assessment.properties.category','def.assessment.assessment.properties.metadata.categories')),
       ssphp.assessment.impact=mvdedup(mvappend('def.assessment.sub_assessment.properties.impact','def.assessment.assessment.properties.metadata.implementationEffort')),
       ssphp.assessment.remediateion=mvdedup(mvappend('def.assessment.sub_assessment.properties.remediation','def.assessment.assessment.properties.metadata.remediationDescription','def.assessment.assessment.properties.metadata.remediationPolicy'))

| rex mode=sed field=ssphp.assessment.description "s/\<br\>//g"
| rex mode=sed field=ssphp.assessment.title "s/\[Preview\] //g"

``` for some reason the makejson fails if these fields are included ```
| fields - ssphp.assessment.vulnerabilityDetails.cvss.2.0.base, ssphp.assessment.vulnerabilityDetails.cvss.3.0.base, ssphp.assessment.vulnerabilityDetails.cvss.4.0.base, ssphp.assessment.vulnerabilityDetails.cvss.2.0.cvssVectorString, ssphp.assessment.vulnerabilityDetails.cvss.3.0.cvssVectorString, ssphp.assessment.vulnerabilityDetails.cvss.4.0.cvssVectorString

``` get the details for the service that owns these resources ```
| join type=outer ssphp.resource.tenant, ssphp.resource.subscription, ssphp.resource.resource_group
    [| search index="ssphp_asset_inventory{{environment}}" ssphp.resource.source="AZURE" earliest=-2d@d latest=now
     | stats values(ssphp.service.*) as ssphp.service.*
             by ssphp.resource.tenant, ssphp.resource.subscription, ssphp.resource.resource_group

     | table ssphp.resource.tenant, ssphp.resource.subscription, ssphp.resource.resource_group, ssphp.service.*]


```====================== WRITE MACRO ===================```

| makejson ssphp.* output=temp_raw
| table ssphp.assessment.type, temp_raw

| eval temp_raw=if(match('temp_raw',"[\s\S]*\"type\":\"microsoft\.security\/assessments[\s\S]*"),replace(replace('temp_raw',"<br>","")," \[Generated by AI\]",""),'temp_raw')


```| fieldsummary
| stats values(field) as all,
        values(eval(if(like('field',"%assessment.sub_assessment%"),'field',null()))) as subassessment,
        values(eval(if(like('field',"%assessment.assessment%"),'field',null()))) as assessment,
        values(eval(if(like('field',"ssphp%"),'field',null()))) as ssphp,
        values(eval(if(like('field',"%assessment.sub_assessment%") OR like('field',"%assessment.assessment%") OR like('field',"ssphp%"),null(),'field'))) as other
       
| table all, ssphp, assessment, subassessment, other```

"""


