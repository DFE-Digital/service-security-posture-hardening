[ssphp_use_case_defender_assessments{{environment}}]
cron_schedule = 30 3 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

(`ssphp_metrics_data_index{{environment}}` sourcetype="azure_resource_graph" type="microsoft.security/assessments" earliest=-2d@d latest=now) OR (index="ssphp_asset_inventory{{environment}}" ssphp.resource.source="AZURE" earliest=-7d@d latest=now)

    [| search `ssphp_metrics_data_index{{environment}}` sourcetype="azure_resource_graph" type="microsoft.security/assessments" earliest=-2d@d latest=now
     | stats max(SSPHP_RUN) as SSPHP_RUN, values(sourcetype) as sourcetype

     | append
         [| inputlookup ssphp_last_asset_inventory_ssphp_run{{environment}}.csv where inventory_type="azure"
          | stats max(SSPHP_RUN) as SSPHP_RUN
          | eval sourcetype="stash_hec"]
     
     | eval sub_search_text="(sourcetype=\"".'sourcetype'."\" AND SSPHP_RUN=\"".'SSPHP_RUN'."\")"
     | stats values(sub_search_text) as sub_search_text
     | eval sub_search_text="(".mvjoin('sub_search_text'," OR ").")"
     | return $sub_search_text]

| spath properties.resourceDetails.id
| spath properties.resourceDetails.Id
| eval ssphp.resource.id=if(index="ssphp_metrics_data",lower(coalesce('properties.resourceDetails.Id','properties.resourceDetails.id')),'ssphp.resource.id')


| fields index, SSPHP_RUN, ssphp.resource.id, ssphp.resource.*, ssphp.service.*, _raw
| stats values(index) as indexes, 
        values(eval(if(index="ssphp_metrics_data",'_raw',null()))) as raw, 
        values(ssphp.service.*) as ssphp.service.*,
        values(ssphp.resource.subscription_name) as ssphp.resource.subscription_name
        by ssphp.resource.id
| eval index_count=mvcount('indexes')
| search index_count=2
```| search index_count=1 AND indexes="ssphp_metrics_data"```
| mvexpand raw

| spath input=raw output=rg path=resourceGroup
| spath input=raw output=rt path=properties.resourceDetails.ResourceType

| where NOT (rt="subscription" OR isnull(rg) OR rg="")
| fields - rg, rt, indexes

| eval ssphp.service.portfolio=if(isnull('ssphp.service.portfolio'),"Unassigned",'ssphp.service.portfolio'),
       ssphp.service.service_line=if('ssphp.service.portfolio'="Unassigned","Unassigned",'ssphp.service.service_line'),
       ssphp.service.product=if('ssphp.service.portfolio'="Unassigned","Unassigned",'ssphp.service.product'),
       ssphp.service.cost_centre.code=if('ssphp.service.portfolio'="Unassigned","Unassigned",'ssphp.service.cost_centre.code'),
       ssphp.service.id='ssphp.service.cost_centre.code'

| spath input=raw path=SSPHP_RUN
| spath input=raw path=SSPHP_UID

| spath input=raw path=id output=ssphp.assessment.id
| spath input=raw path=name output=ssphp.assessment.name
| spath input=raw path=type output=ssphp.assessment.type

| spath input=raw path=properties.description
| spath input=raw path=properties.displayName
| spath input=raw path=properties.metadata.description
| spath input=raw path=properties.metadata.displayName
| spath input=raw path=properties.metadata.assessmentType output=ssphp.assessment.assessmentType
| spath input=raw path=properties.metadata.categories{} output=ssphp.assessment.categories
| spath input=raw path=properties.metadata.cloudProviders{} output=ssphp.assessment.cloudProviders
| spath input=raw path=properties.metadata.createdBy output=ssphp.assessment.createdBy
| spath input=raw path=properties.metadata.createdDateTimeUtc output=ssphp.assessment.createdDateTimeUtc
| spath input=raw path=properties.metadata.implementationEffort output=ssphp.assessment.implementationEffort
| spath input=raw path=properties.metadata.lastUpdatedBy output=ssphp.assessment.lastUpdatedBy
| spath input=raw path=properties.metadata.lastUpdatedDateTimeUtc output=ssphp.assessment.lastUpdatedDateTimeUtc
| spath input=raw path=properties.metadata.managementProvider output=ssphp.assessment.managementProvider
| spath input=raw path=properties.metadata.policyDefinitionId output=ssphp.assessment.policyDefinitionId
| spath input=raw path=properties.metadata.preview output=ssphp.assessment.preview
| spath input=raw path=properties.metadata.publishDates.ga output=ssphp.assessment.publishDates.ga
| spath input=raw path=properties.metadata.publishDates.public output=ssphp.assessment.publishDates.public
| spath input=raw path=properties.metadata.remediationDescription output=ssphp.assessment.remediationDescription
| spath input=raw path=properties.metadata.remediationPolicy output=ssphp.assessment.remediationPolicy
| spath input=raw path=properties.metadata.securityIssue output=ssphp.assessment.securityIssue
| spath input=raw path=properties.metadata.severity output=ssphp.assessment.severity
| spath input=raw path=properties.metadata.tactics{} output=ssphp.assessment.tactics
| spath input=raw path=properties.metadata.techniques{} output=ssphp.assessment.techniques
| spath input=raw path=properties.metadata.threats{} output=ssphp.assessment.threats
| spath input=raw path=properties.metadata.userImpact output=ssphp.assessment.userImpact
| spath input=raw path=properties.resourceDetails.MachineName output=ssphp.resource.MachineName
| spath input=raw path=properties.resourceDetails.NativeResourceId output=ssphp.resource.NativeResourceId
| spath input=raw path=properties.resourceDetails.ResourceId output=ssphp.resource.ResourceId
| spath input=raw path=properties.resourceDetails.ResourceName output=ssphp.resource.ResourceName
| spath input=raw path=properties.resourceDetails.ResourceProvider output=ssphp.resource.ResourceProvider
| spath input=raw path=properties.resourceDetails.ResourceType output=ssphp.resource.ResourceType
| spath input=raw path=properties.resourceDetails.Source output=ssphp.resource.Source
| spath input=raw path=properties.resourceDetails.SourceComputerId output=ssphp.resource.SourceComputerId
| spath input=raw path=properties.resourceDetails.VMUUID output=ssphp.resource.VMUUID
| spath input=raw path=properties.resourceDetails.WorkspaceId output=ssphp.resource.WorkspaceId
| spath input=raw path=properties.resourceDetails.source output=ssphp.resource.source
| spath input=raw path=properties.status.cause output=ssphp.assessment.status.cause
| spath input=raw path=properties.status.code output=ssphp.assessment.status.code
| spath input=raw path=properties.status.description output=ssphp.assessment.status.description
| spath input=raw path=properties.status.firstEvaluationDate output=ssphp.assessment.status.firstEvaluationDate
| spath input=raw path=properties.status.severity output=ssphp.assessment.status.severity
| spath input=raw path=properties.status.statusChangeDate output=ssphp.assessment.status.statusChangeDate
| spath input=raw path=resourceGroup output=ssphp.resource.resource_group
| spath input=raw path=subscriptionId output=ssphp.resource.subscription
| spath input=raw path=tenantId output=ssphp.resource.tenant

| eval ssphp.assessment.description=coalesce('properties.description','properties.metadata.description'),
       ssphp.assessment.display_name=coalesce('properties.displayName','properties.metadata.displayName'),
       ssphp.resource.type=mvindex(split('ssphp.resource.id',"/"),mvcount(split('ssphp.resource.id',"/"))-3)."/".mvindex(split('ssphp.resource.id',"/"),mvcount(split('ssphp.resource.id',"/"))-2)
       
| fields ssphp.assessment.*, ssphp.service.*, ssphp.resource.*


``` ##################### replace with dashboard filter ##################### ```


``` ##################### end dashboard query ##################### ```

| rex field=ssphp.assessment.id "[\s\S]*\/(?<ssphp_use_case_id>[\s\S]*)$"
| rename ssphp_use_case_id as ssphp.use_case.id

| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id='ssphp.assessment.name',
       ssphp.use_case.title="Microsoft Defender Assessment [".'ssphp.assessment.name'."]",
       ssphp.use_case.savedsearch="ssphp_use_case_defender_assessments{{environment}}",
       ssphp.use_case.group="AZURE",
       ssphp.use_case.group_name="MS-DEFENDER",
       ssphp.use_case.version.number="7.0.0",
       ssphp.use_case.version.last_changed_date="2024-11-27",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.category="POSTURE",
       ssphp.assessment.source="Defender"

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5"

| eval ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.ciso_priority=case(lower('ssphp.assessment.severity')="high","1",
                                      lower('ssphp.assessment.severity')="medium","2",
                                      1==1,"3"),
       ssphp.score.scoring_narrative="In order to be compliant, the value of properties.status.code MUST be 'Healthy' for each of the Resources listed.
Note : the health status relates only to the Assessment checked for this specific Control : 'xxxxxxxxxx'.
All the resources marked as 'Unhealthy' must be remediated"

| fields SSPHP_RUN, ssphp.*


| eval ssphp.score.numerator=coalesce(mvcount(mvfilter(match('ssphp.assessment.status.code',"Unhealthy"))),"0"),
       ssphp.score.denominator=coalesce(mvcount('ssphp.assessment.status.code'),"0"),
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator'),
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")

| eval SSPHP_UID=md5('ssphp.use_case.category'."|".'ssphp.service.id'."|".'ssphp.use_case.id'."|".'ssphp.resource.id')

| eval ssphp.score.color=case('ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="1","red",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="2","orange",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="3","white",
                              1==1,'ssphp.score.color')

| fields SSPHP_RUN, SSPHP_UID, ssphp.*


`ssphp_use_case_write{{environment}}`

"""


