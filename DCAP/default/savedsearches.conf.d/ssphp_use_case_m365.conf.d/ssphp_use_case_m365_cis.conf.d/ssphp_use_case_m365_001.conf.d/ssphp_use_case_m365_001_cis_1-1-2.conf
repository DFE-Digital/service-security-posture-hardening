[ssphp_use_case_m365_001_cis_1-1-2{{environment}}]
cron_schedule = 10 4 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_metrics_data_index{{environment}}` sourcetype="SSPHP.AAD.user" earliest=-7d@d latest=now
    [| search index=*data* sourcetype="SSPHP.AAD.user" earliest=-7d@d latest=now
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]

| spath id
| spath userPrincipalName
```| spath isPrivileged| search isPrivileged=true```
| spath userType
| spath transitiveMemberOf{}.@odata.type
| spath transitiveMemberOf{}.displayName
| spath transitiveMemberOf{}.id
 
| makemv admin_roles
| foreach mode=multivalue transitiveMemberOf{}.displayName
    [| eval admin_roles=if(in(lower(<<ITEM>>), "application administrator", "authentication administrator", "billing administrator", "cloud application administrator", "conditional access administrator", "exchange administrator", "global administrator", ```"global reader",``` "helpdesk administrator", "password administrator", "privileged authentication administrator", "privileged role administrator", "security administrator", "sharepoint administrator", "user administrator"), mvappend('admin_roles',<<ITEM>>), 'admin_roles')]
| where mvcount('admin_roles')>0   ``` are they an admin ```
 
| fields id, userPrincipalName, isPrivileged, userType, ```transitiveMemberOf{}.@odata.type, ```admin_roles, matched_cap, transitiveMemberOf{}.displayName, transitiveMemberOf{}.id, conditionalAccessPolicies{}.id, conditionalAccessPolicies{}.displayName, conditionalAccessPolicies{}.state


| eval member=mvzip('transitiveMemberOf{}.id','transitiveMemberOf{}.displayName',"::")
| eval caps=mvzip('conditionalAccessPolicies{}.id','conditionalAccessPolicies{}.displayName',"::"),
       caps=mvzip('caps','conditionalAccessPolicies{}.state',"::")
      
| fields id, userPrincipalName, isPrivileged, userType, admin_roles, matched_cap, member, caps
 
| mvexpand caps
 
| eval cap_id=mvindex(split('caps',"::"),0),
       cap_display_name=mvindex(split('caps',"::"),1),
       cap_status=mvindex(split('caps',"::"),2)
      
| join type=outer cap_id max=1
    [| `ssphp_use_case_msgraph{{environment}}("/v1.0/identity/conditionalAccess/policies")`
 
     | spath grantControls
     | spath grantControls.authenticationStrength
     | spath grantControls.authenticationStrength.id
 
     | where "grantControls.authenticationStrength.id"="00000000-0000-0000-0000-000000000002"  OR  
             "grantControls.authenticationStrength.id"="00000000-0000-0000-0000-000000000003" OR 
             "grantControls.authenticationStrength.id"="00000000-0000-0000-0000-000000000004" OR  
             like('grantControls.builtInControls{}' ,"%mfa%")    ``` policies with MFA enabled in them ```
 
     | eval cap_mfa_enabled="true"
     | rename id as cap_id
     | dedup cap_id, displayName, cap_mfa_enabled
     | table cap_id, displayName, cap_mfa_enabled
    ]
 
| fillnull value="false" cap_mfa_enabled

| stats values(userPrincipalName) as userPrincipalName, values(admin_roles) as admin_roles, list(cap_display_name) as cap_display_name, list(cap_mfa_enabled) as cap_mfa_enabled by id

| makemv ssphp.score.non_compliant_fields
| eval account_has_mfa=if(mvcount(mvfilter(match('cap_mfa_enabled',"true")))>0,"true","false"),
       ssphp.score.non_compliant_fields=if('account_has_mfa'="false",
                                           'ssphp.score.non_compliant_fields',
                                           mvappend('ssphp.score.non_compliant_fields',"account_has_mfa"))


`ssphp_fs_use_case_exemption_breakglass_accounts`

| fields userPrincipalName, id, admin_roles, cap_display_name, cap_mfa_enabled, account_has_mfa, is_breakglass, ssphp.score.non_compliant_fields


``` ##################### end dashboard query ##################### ```

| search is_breakglass="false"
| stats count as total_admin_accounts, 
        sum(eval(if('account_has_mfa'="true",1,0))) as total_admin_accounts_with_mfa, 
        sum(eval(if('account_has_mfa'="true",0,1))) as total_admin_accounts_without_mfa

| eval ssphp.score.numerator='total_admin_accounts_without_mfa', 
       ssphp.score.denominator='total_admin_accounts',
       ssphp.score.score=floor(('total_admin_accounts'-'total_admin_accounts_without_mfa')*100/'total_admin_accounts')
| fillnull value=0 ssphp.score.score
| fillnull value="-" ssphp.score.numerator, ssphp.score.denominator


| fields ssphp.score.score, ssphp.score.numerator, ssphp.score.denominator, ssphp.score.non_compliant_fields


```| stats min(ssphp.score.score) as ssphp.score.score, max(ssphp.score.numerator) as ssphp.score.numerator, min(ssphp.score.denominator) as ssphp.score.denominator```

`ssphp_use_case_write_null_output_override{{environment}}(0)`


``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now()),
       ssphp.use_case.id="m365_001_cis_1-1-2",

       ssphp.use_case.version.number="4.0.0",
       ssphp.use_case.version.last_changed_date="2025-02-21",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       
       ssphp.microsoft.description=coalesce('description',"-")

`ssphp_use_case_add_cis_metadata_m365{{environment}}`

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5",
       ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-"

| eval ssphp.source.service="M365",
       ssphp.source.service_name="M365",
       ssphp.use_case.savedsearch="ssphp_use_case_m365_001_cis_1-1-2{{environment}}"


| eval ssphp.score.scoring_narrative="ALL admin users (accounts with admin roles), with the exception of the 2 breakglass accounts, 
MUST have at least 1 Conditional Access Policy that includes 1 of the 3 MFA requirements."


| eval ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")


`ssphp_use_case_write{{environment}}`

"""
