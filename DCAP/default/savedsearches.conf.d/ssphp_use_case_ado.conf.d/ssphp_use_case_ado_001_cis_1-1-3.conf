[ssphp_use_case_ado_001_cis_1-1-3{{environment}}]
cron_schedule = 10 6 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_use_case_ado_data{{environment}}`


| eval policy_branch_matches_repo_default=case(lower('policy_settings_scope_matchKind')="defaultbranch","true", 
                                               lower('policy_settings_scope_matchKind')="exact" AND lower('policy_settings_scope_refName')=lower('repo_default_branch'),"true", 
                                               lower('policy_settings_scope_matchKind')="prefix" AND like(lower('repo_policy_defaultBranch'),lower('policy_settings_scope_refName')."%"),"true", 
                                               1==1,"false"),
       target_policy_settings_minimumApproverCount=if('policy_settings_creatorVoteCounts'="true","2","1"),
       passed_target_policy_settings_minimumApproverCount=if('policy_settings_minimumApproverCount'>='target_policy_settings_minimumApproverCount',"true","false")
                         
```| search policy_type_id="fa4e907d-c16b-4a4c-9dfa-4906e5d171dd" AND policy_branch_matches_repo_default="true"```

| fields tenant, organization, project_id, project_name, 
        repo_id, repo_name, repo_url,
        policy_id, policy_type_id, policy_type_display_name, policy_revision,
        repo_default_branch,
        policy_settings_*,
        target_policy_settings_minimumApproverCount, passed_target_policy_settings_minimumApproverCount,
        policy_branch_matches_repo_default,
        ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product
        
```| search repo_id="3bbc6956-ee04-4114-a23e-d3c759c6c753"```
| eval target_policy_type_id="fa4e907d-c16b-4a4c-9dfa-4906e5d171dd" ``` minimum approver count ```

| stats values(project_name) as project_name, values(repo_name) as repo_name,
        ```values(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true","true","false"))) as tp,```
        
        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_id',null()))) as policy_id,
        values(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_type_id',null()))) as policy_type_id,

        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_settings_minimumApproverCount',null()))) as policy_settings_minimumApproverCount,
        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'target_policy_settings_minimumApproverCount',null()))) as target_policy_settings_minimumApproverCount,
        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'passed_target_policy_settings_minimumApproverCount',null()))) as passed_target_policy_settings_minimumApproverCount,
        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_branch_matches_repo_default',null()))) as policy_branch_matches_repo_default,
        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_settings_creatorVoteCounts',null()))) as policy_settings_creatorVoteCounts,
        
        sum(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true" AND 'passed_target_policy_settings_minimumApproverCount'="true",1,0))) as compliant_policies,
        
        ,
        values(ssphp.service.portfolio) as ssphp.service.portfolio, 
        values(ssphp.service.service_line) as ssphp.service.service_line, 
        values(ssphp.service.product) as ssphp.service.product
        ```values(repo_url) as repo_url```
        by tenant, organization, project_id, repo_id
        
| sort 0 - compliant_policies
| eval policy_compliant=if(compliant_policies>0,"true","false")


| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if('policy_compliant'="true",
                                            'ssphp.score.non_compliant_fields',
                                            mvappend('ssphp.score.non_compliant_fields',"policy_settings_minimumApproverCount"))

| eval ssphp.score.remediation_priority=if('policy_settings_minimumApproverCount'>='dfe_min_approver',0,15)

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="1",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| fields ssphp.service.*,
         organization, project_name, project_id, ```project_state, project_visibility,``` repo_name, repo_id, ```repo_isDisabled, repo_isInMaintenance,```
         url, webUrl,
         policy_settings_minimumApproverCount, policy_settings_creatorVoteCounts,
         ssphp.score.remediation_priority,
         ssphp.score.score, ssphp.score.non_compliant_fields


``` ##################### replace with dashboard filter ##################### ```

``` ##################### end dashboard query ##################### ```

| stats values(ado_project_name) as ado_project_name, values(ado_repo_name) as ado_repo_name, values(ado_url) as ado_url, values(ado_webUrl) as ado_webUrl,
        count as ssphp.score.denominator,
        sum(eval(if('ssphp.score.score'<100,1,0))) as ssphp.score.numerator,
        values(ssphp.service.*) as ssphp.service.*,
        values(ssphp.score.remediation_priority) as ssphp.score.remediation_priority
        by ado_organisation, ado_project_id, ado_repo_id
        
| eval ssphp.score.score=if('ssphp.score.numerator'>0,"0","100")






       
``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id="ado_001_cis_1-1-3",
       ssphp.use_case.title=upper(mvindex(split('ssphp.use_case.id',"_"),0)) . " [CIS ".replace(mvindex(split('ssphp.use_case.id',"_"),-1),"-",".") . "]",
       ssphp.use_case.savedsearch="ssphp_use_case_" . 'ssphp.use_case.id' . "{{environment}}",
       ssphp.use_case.version.number="1.1.0",
       ssphp.use_case.version.last_changed_date="2025-03-03",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.group="ADO",
       ssphp.use_case.group_name="REPOS",
       ssphp.use_case.category="REPOS",
       ssphp.resource.id="/" . 'ado_organisation' . "/" . 'ado_project_id' . "/" . 'ado_repo_id',
       ssphp.resource.name="/" . 'ado_organisation' . "/" . 'ado_project_name' . "/" . 'ado_repo_name',
       ssphp.resource.url='ado_url',
       ssphp.resource.web_url='ado_webUrl',
       ssphp.resource.type="ado/repo",
       ssphp.assessment.source="ADO"

| eval ssphp.risk.expectancy="-",
       ssphp.risk.impact="-"

| eval ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="In order to be compliant, repositories must have branch protection on and the required approver count to be 2 or more.
       If the repo is configured to permit the owner approving their own PRs, then the required approver count must be 3 or more."

| eval SSPHP_UID=md5('ssphp.use_case.category'."|".'ssphp.service.product'."|".'ssphp.use_case.id'."|".'ssphp.resource.id')

`ssphp_use_case_add_cis_metadata_github{{environment}}`
| fields - ssphp.source.foundational_system

`ssphp_use_case_no_write{{environment}}`


"""
