[ssphp_use_case_ado_001_cis_1-1-4{{environment}}]
cron_schedule = 10 6 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_use_case_ado_data{{environment}}`


| fields ssphp.resource.organization, ssphp.resource.project_id, ssphp.resource.project_name, ssphp.resource.repo_id, ssphp.resource.repo_name, tenant, repo_url
         policy_id, policy_type_id, policy_type_display_name, policy_revision,
         repo_default_branch, repo_policy_defaultBranch, 
         policy_settings_scope_matchKind, policy_settings_scope_refName, 
         policy_settings_resetOnSourcePush,
         policy_branch_matches_repo_default,
         ssphp.service.*

| eval target_policy_type_id="fa4e907d-c16b-4a4c-9dfa-4906e5d171dd" ``` minimum approver count ```

| stats values(ssphp.resource.project_name) as ssphp.resource.project_name, 
        values(repo_name) as repo_name,
        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_id',null()))) as policy_id,
        values(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_type_id',null()))) as policy_type_id,

        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_settings_resetOnSourcePush',null()))) as policy_settings_resetOnSourcePush,
        
        list(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true",'policy_branch_matches_repo_default',null()))) as policy_branch_matches_repo_default,
        sum(eval(if(policy_type_id='target_policy_type_id' AND policy_branch_matches_repo_default="true" AND 'policy_settings_resetOnSourcePush'="true",1,0))) as compliant_policies,
        
        values(ssphp.service.*) as ssphp.service.*

        by tenant, ssphp.resource.organization, ssphp.resource.project_id, ssphp.resource.repo_id
        
| sort 0 - compliant_policies
| eval policy_compliant=if(compliant_policies>0,"true","false")

| fillnull value="-" 
| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if('policy_compliant'="true" AND (mvcount(mvfilter(match('policy_settings_resetOnSourcePush',"true")))>0),
                                           'ssphp.score.non_compliant_fields',
                                           mvappend('ssphp.score.non_compliant_fields',"policy_settings_resetOnSourcePush"))
                                            

| eval ssphp.score.remediation_priority=if('policy_settings_minimumApproverCount'>='dfe_min_approver',0,15)

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="1",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| eval resource_id="/" . 'ssphp.resource.organization' . "/" . 'ssphp.resource.project_id' . "/" . 'ssphp.resource.repo_id'

| fields ssphp.service.*,
         ssphp.resource.*,
         ssphp.score.*,
         resource_id, policy_id, 
         policy_settings_resetOnSourcePush,
         policy_compliant


``` ##################### replace with dashboard filter ##################### ```

``` ##################### end dashboard query ##################### ```

| stats values(ssphp.service.*) as ssphp.service.*,
        values(ssphp.resource.*) as ssphp.resource.*,
        count as ssphp.score.denominator,
        sum(eval(if('ssphp.score.score'<100,1,0))) as ssphp.score.numerator,
        values(ssphp.score.remediation_priority) as ssphp.score.remediation_priority

        by ssphp.resource.organization, ssphp.resource.project_id, ssphp.resource.repo_id
        
| eval ssphp.score.score=if('ssphp.score.numerator'>0,"0","100")


``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id="ado_001_cis_1-1-4",
       ssphp.use_case.title=upper(mvindex(split('ssphp.use_case.id',"_"),0)) . " [CIS ".replace(mvindex(split('ssphp.use_case.id',"_"),-1),"-",".") . "]",
       ssphp.use_case.savedsearch="ssphp_use_case_" . 'ssphp.use_case.id' . "{{environment}}",
       ssphp.use_case.version.number="1.0.1",
       ssphp.use_case.version.last_changed_date="2025-08-01",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.group="ADO",
       ssphp.use_case.group_name="REPOS",
       ssphp.use_case.category="REPOS",
       ssphp.resource.id="/" . 'ssphp.resource.organization' . "/" . 'ssphp.resource.project_id' . "/" . 'ssphp.resource.repo_id',
       ssphp.resource.name="/" . 'ssphp.resource.organization' . "/" . 'ssphp.resource.project_name' . "/" . 'ssphp.resource.repo_name',
       ssphp.resource.type="ado/repo",
       ssphp.assessment.source="ADO"

| eval ssphp.risk.expectancy="-",
       ssphp.risk.impact="-"

| eval ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="In order to be compliant, repositories must have a policy where branch protection is on and resetOnSourcePush='true'."

| eval SSPHP_UID=md5('ssphp.use_case.category'."|".'ssphp.service.product'."|".'ssphp.use_case.id'."|".'ssphp.resource.id')

`ssphp_use_case_add_cis_metadata_github{{environment}}`
| fields - ssphp.source.foundational_system

`ssphp_use_case_write{{environment}}`

"""
