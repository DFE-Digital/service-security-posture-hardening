[ssphp_use_case_ado_001_cis_1-5-1{{environment}}]
cron_schedule = 10 6 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_use_case_ado_data{{environment}}`

| fields tenant, organization, project_id, project_name, 
         repo_id, repo_name, repo_url,
         policy_id, policy_type_id, policy_type_display_name, policy_revision,
         repo_default_branch, repo_policy_defaultBranch, 
         policy_settings_scope_matchKind, policy_settings_scope_refName, 
         policy_settings_avoidThrowingErrors, policy_settings_suppressionFile,
         policy_is_deleted, policy_is_enabled, policy_is_blocking,
         policy_branch_matches_repo_default,
         ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product

| eval target_policy_type_id="e67ae10f-cf9a-40bc-8e66-6b3a8216956e" ``` Secrets scanning restriction ```,
       policy_compliant=if('policy_type_id'='target_policy_type_id' AND policy_is_deleted="false" AND policy_is_enabled="true" AND policy_is_blocking="true","true","false")

| stats values(project_name) as project_name, 
        values(repo_name) as repo_name,
        list(eval(if(policy_type_id='target_policy_type_id','policy_id',null()))) as policy_id,
        values(eval(if(policy_type_id='target_policy_type_id','policy_type_id',null()))) as policy_type_id,
        values(eval(if(policy_type_id='target_policy_type_id','policy_type_display_name',null()))) as policy_type_display_name,
        values(ssphp.service.portfolio) as ssphp.service.portfolio, 
        values(ssphp.service.service_line) as ssphp.service.service_line, 
        values(ssphp.service.product) as ssphp.service.product,
        list(eval(if(policy_type_id='target_policy_type_id','policy_compliant',null()))) as policy_compliant,
        sum(eval(if('policy_compliant'="true",1,0))) as compliant_policies,      
        list(eval(if(policy_type_id='target_policy_type_id','policy_is_deleted',null()))) as policy_is_deleted,      
        list(eval(if(policy_type_id='target_policy_type_id','policy_is_enabled',null()))) as policy_is_enabled,   
        list(eval(if(policy_type_id='target_policy_type_id','policy_is_blocking',null()))) as policy_is_blocking,

        by tenant, organization, project_id, repo_id

| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if('compliant_policies'>0,
                                            'ssphp.score.non_compliant_fields',
                                            mvappend('ssphp.score.non_compliant_fields',"compliant_policies"))

| eval ssphp.score.remediation_priority=if('compliant_policies'>0,"0","24")

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="1",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| fields ssphp.service.*,
         organization, project_id, project_name, repo_id, repo_name,
         policy_type_id, policy_type_display_name, policy_id, 
         compliant_policies, policy_is_deleted, policy_is_enabled,
         ssphp.score.remediation_priority,
         ssphp.score.score, ssphp.score.non_compliant_fields


``` ##################### replace with dashboard filter ##################### ```

``` ##################### end dashboard query ##################### ```

| stats values(ssphp.service.*) as ssphp.service.*,
        values(project_name) as project_name, 
        values(repo_name) as repo_name,
        count as ssphp.score.denominator,
        sum(eval(if('ssphp.score.score'<100,1,0))) as ssphp.score.numerator,
        values(ssphp.service.*) as ssphp.service.*,
        values(ssphp.score.remediation_priority) as ssphp.score.remediation_priority

        by organization, project_id, repo_id
        
| eval ssphp.score.score=if('ssphp.score.numerator'>0,"0","100")


``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id="ado_001_cis_1-5-1",
       ssphp.use_case.title=upper(mvindex(split('ssphp.use_case.id',"_"),0)) . " [CIS ".replace(mvindex(split('ssphp.use_case.id',"_"),-1),"-",".") . "]",
       ssphp.use_case.savedsearch="ssphp_use_case_" . 'ssphp.use_case.id' . "{{environment}}",
       ssphp.use_case.version.number="1.0.0",
       ssphp.use_case.version.last_changed_date="2025-03-20",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.group="ADO",
       ssphp.use_case.group_name="REPOS",
       ssphp.use_case.category="REPOS",
       ssphp.resource.id="/" . 'organization' . "/" . 'project_id' . "/" . 'repo_id',
       ssphp.resource.name="/" . 'organization' . "/" . 'project_name' . "/" . 'repo_name',
       ssphp.resource.organization='organization',
       ssphp.resource.project_id='project_id',
       ssphp.resource.project_name='project_name',
       ssphp.resource.repo_id='repo_id',
       ssphp.resource.repo_name='repo_name',
       ssphp.resource.type="ado/repo",
       ssphp.assessment.source="ADO"

| eval ssphp.risk.expectancy="-",
       ssphp.risk.impact="-"

| eval ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="In order to be compliant, every repo MUST have at least 1 enabled policy of type 'Secrets scanning restriction' which has isBlocking='true'."

| eval SSPHP_UID=md5('ssphp.use_case.category'."|".'ssphp.service.product'."|".'ssphp.use_case.id'."|".'ssphp.resource.id')

`ssphp_use_case_add_cis_metadata_github{{environment}}`
| fields - ssphp.source.foundational_system

`ssphp_use_case_write{{environment}}`
"""
