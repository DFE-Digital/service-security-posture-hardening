[ssphp_use_case_github_sast_2-0{{environment}}]
cron_schedule = 55 5 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_metrics_data_index{{environment}}` sourcetype="github" source="*/contents/.github/workflows*"
    [| search `ssphp_metrics_data_index{{environment}}` sourcetype="github" source="*/contents/.github/workflows*"
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]

| where isnotnull('content_object.name')
| rename content_object.name as workflow_name

| fields SSPHP_RUN, source, workflow_name, content_object.jobs.*.uses

| makemv all_steps_uses
| foreach content_object.jobs.* [| eval all_steps_uses=mvappend('all_steps_uses','<<FIELD>>')]

| eval org=mvindex(split('source',"/"),2),
       repo=mvindex(split('source',"/"),3),
       repo_name="/".'org'."/".'repo'
       
`ssphp_use_case_add_service_metadata_github{{environment}}`
| search ssphp.service.id!="-"

 
| fields SSPHP_RUN, repo_name, workflow_name, all_steps_uses, ssphp.service.*

 
 ```jobs for the workflow```
| join type=outer repo_name, workflow_name
    [| search `ssphp_metrics_data_index{{environment}}` sourcetype="github" source="*/actions/jobs*"
         [| search `ssphp_metrics_data_index{{environment}}` sourcetype="github" source="*/actions/jobs*"
          | stats max(SSPHP_RUN) as SSPHP_RUN
          | return SSPHP_RUN]
          
     | eval org=mvindex(split('source',"/"),2),
            repo=mvindex(split('source',"/"),3),
            repo_name="/".'org'."/".'repo'
     | eval completed_at_epoch=strptime('completed_at',"%Y-%m-%dT%H:%M:%SZ")
     | fields repo_name, workflow_name, status, conclusion, started_at, completed_at
     ]


```repo details```
| join type=outer repo_name
    [| search `ssphp_metrics_data_index{{environment}}` sourcetype="github" source="github:*"
         [| search `ssphp_metrics_data_index{{environment}}` sourcetype="github" source="github:*"
          | stats max(SSPHP_RUN) as SSPHP_RUN
          | return SSPHP_RUN]
          
     | rename full_name as repo_name
     | eval repo_name="/".'repo_name',
            org=mvindex(split('repo_name',"/"),1)
     | fields repo_name, archived, pushed_at
     ]


| eval job_uses_codeql=if(mvcount(mvfilter(match('all_steps_uses',"github/codeql-action/analyze.*")))>0,"TRUE","FALSE"),
       job_uses_reusable_workflow=if(mvcount(mvfilter(match('all_steps_uses',"DFE-Digital/github-actions/.github/workflows/reusable-workflow-sast.yml@master")))>0,"TRUE","FALSE")
       
| eval pushed_at_epoch=strptime('pushed_at',"%Y-%m-%dT%H:%M:%SZ"),
       completed_at_epoch=strptime('completed_at',"%Y-%m-%dT%H:%M:%SZ"),
       days_pushed_to_run=floor((completed_at_epoch-pushed_at_epoch)/60/60/24),
       days_pushed_to_run=if('days_pushed_to_run'<0,'days_pushed_to_run'*-1,'days_pushed_to_run'),
       run_recently=if('days_pushed_to_run'<=90 AND 'status'="completed" AND 'conclusion'="success","TRUE","FALSE"),
       workflow_passed=if('run_recently'="TRUE" AND ('job_uses_codeql'="TRUE" OR 'job_uses_reusable_workflow'="TRUE"),"TRUE","FALSE")

| search archived="false"

| fields SSPHP_RUN, repo_name, archived, pushed_at, workflow_name, status, conclusion, started_at, completed_at, days_pushed_to_run, job_uses_codeql, job_uses_reusable_workflow, workflow_passed, all_steps_uses, ssphp.service.*



| fillnull value="no run" status, conclusion

| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if(lower('status')!="completed",
                                           mvappend('ssphp.score.non_compliant_fields',"status"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if(lower('conclusion')!="success",
                                           mvappend('ssphp.score.non_compliant_fields',"conclusion"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if('days_pushed_to_run'>=30,
                                           mvappend('ssphp.score.non_compliant_fields',"days_pushed_to_run"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if(lower('job_uses_codeql')!="true",
                                           mvappend('ssphp.score.non_compliant_fields',"job_uses_codeql"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if(lower('job_uses_reusable_workflow')!="true",
                                           mvappend('ssphp.score.non_compliant_fields',"job_uses_reusable_workflow"),
                                           'ssphp.score.non_compliant_fields')
                                           
| eventstats values(workflow_passed) as repo_workflows_passed by repo_name
| eval ssphp.score.score=coalesce(mvcount(mvfilter(match(lower('repo_workflows_passed'),"true"))),0)
| where 'ssphp.score.score'=0

| eval ssphp.score.denominator="-",
       ssphp.score.numerator="-"

| fields repo_name, archived, pushed_at, workflow_name, status, conclusion, started_at, completed_at, days_pushed_to_run, job_uses_codeql, job_uses_reusable_workflow, all_steps_uses, ssphp.service.*,
         ssphp.service.*,
         ssphp.score.score, ssphp.score.numerator, ssphp.score.denominator, ssphp.score.non_compliant_fields

``` ##################### replace with dashboard filter ##################### ```


``` ##################### end dashboard query ##################### ```


| stats values(ssphp.score.score) as ssphp.score.score,
        values(ssphp.service.*) as ssphp.service.* by repo_name



``` ======== Add Metadata ==========```

| eval ssphp.use_case.id="SAST-2-1",
       ssphp.use_case.title="SAST Workflow Check [SAST-2-1]",
       ssphp.use_case.savedsearch="ssphp_use_case_github_sast_2-0{{environment}}",
       ssphp.use_case.group="GITHUB",
       ssphp.use_case.group_name="SAST",
       ssphp.use_case.version.number="1.0.2",
       ssphp.use_case.version.last_changed_date="2024-08-29",
       ssphp.use_case.version.last_changed_by="Ian Pearl & Sam Pritchard",
       ssphp.use_case.category="CODE_SCAN",
       ssphp.use_case.severity="1",

       ssphp.resource.name='repo_name',
       ssphp.resource.type="github/repo",

       ssphp.assessment.source="GitHub_Actions",
       ssphp.assessment.title="SAST Workflow Checks Active",
       ssphp.assessment.description="Checks that every (non-archived) Repo has at least 1 active Workflow enabled which executes either CodeQL or a reusable workflow and has recently run successfully"


| rename repo_name as ssphp.resource.id

| eval SSPHP_RUN=now(),
       SSPHP_UID=md5('ssphp.service.id'."|".'ssphp.assessment.source'."|".'ssphp.resource.id'."|".'ssphp.use_case.id')

 
| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5"
 
| eval ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.ciso_priority="1",
       ssphp.score.scoring_narrative="The control is compliant when the Repo has at least 1 active Workflow which executes either (a) CodeQL scanning, or (b) a reusable workflow.
The workflow must have run and completed successfully within 30 days of the most recent Push to the Repo."

| eval ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")


`ssphp_use_case_write{{environment}}`

"""