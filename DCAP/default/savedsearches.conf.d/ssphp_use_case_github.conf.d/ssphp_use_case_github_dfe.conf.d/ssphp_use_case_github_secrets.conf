[ssphp_use_case_github_secrets{{environment}}]
cron_schedule = 55 5 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

`ssphp_metrics_data_index{{environment}}` sourcetype="github" source="*secret-scanning/alerts" earliest=-2d@d latest=now

``` ##################### replace with dashboard filter ##################### ```

    [| search `ssphp_metrics_data_index{{environment}}` sourcetype="github" source="*secret-scanning/alerts" earliest=-2d@d latest=now
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]

| where NOT like(lower('message'),"%api rate limit%")

| eval org=mvindex(split('source',"/"),2),
       repo=mvindex(split('source',"/"),3),
       repo_name="/".'org'."/".'repo',
       ssphp.resource.id='repo_name',
       ssphp.resource.name='ssphp.resource.id',
       ssphp.assessment.source="Secrets"

`ssphp_use_case_add_service_metadata_github{{environment}}`


| eval ssphp.use_case.severity="critical",

       ssphp.use_case.id='secret_type',
       
       ssphp.assessment.title='secret_type_display_name',
       ssphp.assessment.description='secret_type_display_name',
       ssphp.assessment.status='state',
       ssphp.assessment.push_protection.bypassed='push_protection_bypassed',
       ssphp.assessment.push_protection.bypassed_at='push_protection_bypassed_at',
       ssphp.assessment.push_protection.bypassed_by='push_protection_bypassed_by',
       ssphp.assessment.url='url',
       
       ssphp.resource.locations_url='locations_url',
       ssphp.resource.type="github/repo"
       
| rename resolution* as ssphp.assessment.resolved.resolution*, resolved_by.login as ssphp.assessment.resolved.resolved_by_login, resolved_at as ssphp.assessment.resolved.resolved_at


| eval ssphp.assessment.state=if(ssphp_http_status=200,"enabled","disabled"),
       ssphp.assessment.status=if(ssphp_http_status!=200,"open",'ssphp.assessment.status'),
       ssphp.use_case.id=if(ssphp_http_status!=200,"SECRETS-00001",'ssphp.use_case.id'),
       ssphp.use_case.title="Secret Scanning [".'ssphp.use_case.id'."]",
       ssphp.assessment.title=if(ssphp_http_status!=200,'message','ssphp.assessment.title'),
       ssphp.assessment.description=if(ssphp_http_status!=200,'message','ssphp.assessment.description'),
       ssphp.assessment.url=if(ssphp_http_status!=200,'source','ssphp.assessment.url')
       

``` ##################### end dashboard query ##################### ```

| fields ssphp.*, number, ssphp_http_status, message, VULNERABILITY_AGE, _raw
 
| eval ssphp.score.score=case(lower('ssphp.assessment.status')="resolved",100,
                              1==1,0),
       ssphp.score.denominator="-",
       ssphp.score.numerator="-"


``` ======== Add Metadata ==========```
| fillnull value="-" ssphp.use_case.id, number

| eval SSPHP_RUN=now(),
       SSPHP_UID=md5('ssphp.service.id'."|".'ssphp.assessment.source'."|".'ssphp.resource.id'."|".'ssphp.use_case.id'."|".'number'),
       ssphp.use_case.savedsearch="ssphp_use_case_github_secrets{{environment}}",
       ssphp.use_case.group="GITHUB",
       ssphp.use_case.group_name="SECRETS",
       ssphp.use_case.version.number="2.0.0",
       ssphp.use_case.version.last_changed_date="2024-11-27",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.category="CODE_SCAN"

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5"

| eval ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.ciso_priority="1",
       ssphp.score.scoring_narrative="The control is compliant when the Repo has Secret Scanning turned on and zero open alerts."

| eval ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")


`ssphp_use_case_write{{environment}}`

"""