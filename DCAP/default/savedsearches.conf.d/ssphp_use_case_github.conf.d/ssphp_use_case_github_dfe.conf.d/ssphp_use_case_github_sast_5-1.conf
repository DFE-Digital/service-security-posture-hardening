[ssphp_use_case_github_sast_5-1{{environment}}]
cron_schedule = 55 5 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

| loadjob savedsearch="ssphp_app_account:{{app}}{{environment}}:ssphp_create_workflow_dataset_github{{environment}}"


| eval job_uses_codeql=if(mvcount(mvfilter(match('workflow_contents_all_steps_uses',"github/codeql-action/analyze.*")))>0,"TRUE","FALSE"),
       job_uses_reusable_workflow=if(mvcount(mvfilter(match('workflow_contents_all_steps_uses',"DFE-Digital/github-actions/.github/workflows/reusable-workflow-sast.yml@master")))>0,"TRUE","FALSE")
       
| eval repo_pushed_at_epoch=strptime('repo_pushed_at',"%Y-%m-%dT%H:%M:%SZ"),
       workflow_run_run_started_at_epoch=strptime('workflow_run_run_started_at',"%Y-%m-%dT%H:%M:%SZ"),
       days_pushed_to_run=floor(('workflow_run_run_started_at_epoch'-'repo_pushed_at_epoch')/60/60/24),
       days_pushed_to_run=if('days_pushed_to_run'<0,'days_pushed_to_run'*-1,'days_pushed_to_run'),
       run_recently=if('days_pushed_to_run'<=90 AND 'workflow_run_job_status'="completed" AND 'workflow_run_job_conclusion'="success","TRUE","FALSE"),
       workflow_passed=if('run_recently'="TRUE" AND ('job_uses_codeql'="TRUE" OR 'job_uses_reusable_workflow'="TRUE"),"TRUE","FALSE")

| search repo_archived="false"

| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if(lower('workflow_run_job_status')!="completed",
                                           mvappend('ssphp.score.non_compliant_fields',"workflow_run_job_status"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if(lower('workflow_run_job_conclusion')!="success",
                                           mvappend('ssphp.score.non_compliant_fields',"workflow_run_job_conclusion"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if('days_pushed_to_run'>=30,
                                           mvappend('ssphp.score.non_compliant_fields',"days_pushed_to_run"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if(lower('job_uses_codeql')!="true",
                                           mvappend('ssphp.score.non_compliant_fields',"job_uses_codeql"),
                                           'ssphp.score.non_compliant_fields'),
       ssphp.score.non_compliant_fields=if(lower('job_uses_reusable_workflow')!="true",
                                           mvappend('ssphp.score.non_compliant_fields',"job_uses_reusable_workflow"),
                                           'ssphp.score.non_compliant_fields')
                                           

| eval workflow_score=if(lower('workflow_passed')="true",100,0)
| eventstats sum(workflow_score) as repo_score by repo_name
| eval repo_score=if('repo_score'>0,100,0),
       ssphp.score.remediation_priority=if('repo_score'>=100,0,21)

| fields repo_name, repo_archived, repo_pushed_at, repo_pushed_at_epoch,
         workflow_id, workflow_name, workflow_path, workflow_state,
         workflow_contents_name, workflow_contents_all_steps_uses,
         workflow_run_id, workflow_run_run_attempt, workflow_run_run_number, workflow_run_run_started_at, workflow_run_run_started_at_epoch, workflow_run_status, workflow_run_conclusion, 
         workflow_run_job_id, workflow_run_job_name, workflow_run_job_completed_at, workflow_run_job_conclusion, workflow_run_job_started_at, workflow_run_job_status, workflow_run_job_steps,
         days_pushed_to_run, job_uses_codeql, job_uses_reusable_workflow, run_recently, workflow_passed, workflow_score, repo_score, ssphp.score.non_compliant_fields,
         ssphp.score.remediation_priority, ssphp.service.*


``` ##################### replace with dashboard filter ##################### ```


``` ##################### end dashboard query ##################### ```


| stats values(repo_score) as ssphp.score.score,
        values(ssphp.service.*) as ssphp.service.*,
        values(ssphp.score.remediation_priority) as ssphp.score.remediation_priority
        by repo_name
        


``` ======== Add Metadata ==========```

| eval ssphp.use_case.id="SAST-5-1",
       ssphp.use_case.title="SAST Workflow Check [SAST-5-1]",
       ssphp.use_case.savedsearch="ssphp_use_case_github_sast_5-1{{environment}}",
       ssphp.use_case.group="GITHUB",
       ssphp.use_case.group_name="SAST",
       ssphp.use_case.version.number="1.1.1",
       ssphp.use_case.version.last_changed_date="2024-12-10",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.category="CODE_SCAN",
       ssphp.use_case.severity="1",

       ssphp.resource.id='repo_name',
       ssphp.resource.name='repo_name',
       ssphp.resource.type="github/repo",

       ssphp.assessment.origin="DFE",
       ssphp.assessment.source="Workflows",
       ssphp.assessment.sub_source="true",
       ssphp.assessment.title="No Active SAST Workflows [CodeQL / Semgrep]",
       ssphp.assessment.description="Checks that every (non-archived) Repo has at least 1 active Workflow enabled which executes either CodeQL or a reusable workflow and has recently run successfully"


| rename repo_name as ssphp.resource.id

| eval SSPHP_RUN=now(),
       SSPHP_UID=md5('ssphp.service.id'."|".'ssphp.assessment.source'."|".'ssphp.resource.id'."|".'ssphp.use_case.id')

 
| eval ssphp.risk.expectancy="-",
       ssphp.risk.impact="-"
 
| eval ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.ciso_priority="1",
       ssphp.score.scoring_narrative="The control is compliant when the Repo has at least 1 active Workflow which executes either (a) CodeQL scanning, or (b) a reusable workflow.
The workflow must have run and completed successfully within 30 days of the most recent Push to the Repo."

| eval ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red")


`ssphp_use_case_write{{environment}}`

"""