###################### SERVICE VERSION ######################
[ssphp_use_case_github_001_cis_1-1-5_svc{{environment}}]
cron_schedule = 55 5 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

| `ssphp_use_case_github{{environment}}("*/branches/*/protection","/repos/*/rules/branches/*")`

| fields repo_name, http_status_branch_protect, http_status_rules, 
         admins, dismissal_restrictions_branch_protect, ```dismissal_restrictions_branch_protect_apps, dismissal_restrictions_branch_protect_teams,``` dismissal_restrictions_branch_protect_users,
         http_status_rules, dismissal_restrictions_rules

`ssphp_use_case_add_service_metadata_github{{environment}}` 

| fillnull value="-" dismissal_restrictions_branch_protect, ```dismissal_restrictions_branch_protect_apps, dismissal_restrictions_branch_protect_teams,``` dismissal_restrictions_branch_protect_users, dismissal_restrictions_rules

``` ******************** USE CASE CAVEATS ***********************
- For PR dismissal by configuration in *Branch Protection*, we are only checking that the USERS permitted to do this are in the list of Repo/Org admins. This means that we are not checking that users in 'Teams' or 'Apps' are configured to be able to dismiss restrictions.
- We are not even attempting to trap dismissal bypass where it is configured as *Rules*
******************** IN OTHER WORDS, THIS USE CASE CURRENTLY ONLY CHECKS THAT NO USERS WHO ARE NO ADMINS HAVE BEEN CONFIGURED USING BRANCH PROTECTION TO BYPASS PRs *****************
```

| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if(dismissal_restrictions_branch_protect="-",
                                            mvappend('ssphp.score.non_compliant_fields',"dismissal_restrictions_branch_protect"),
                                            'ssphp.score.non_compliant_fields'),
                                            
       temp=mvdedup(mvappend('admins','dismissal_restrictions_branch_protect_users')),
       ssphp.score.non_compliant_fields=if((dismissal_restrictions_branch_protect_users!="-" AND mvcount('admins')!=mvcount('temp')),
                                            mvappend('ssphp.score.non_compliant_fields',"dismissal_restrictions_branch_protect_users"),
                                            'ssphp.score.non_compliant_fields')

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="1",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| fields ssphp.service.id, ssphp.service.name, ssphp.service.display_name, ssphp.service.group, ssphp.service.portfolio, ssphp.service.division,
         full_repo_name, dismissal_restrictions_branch_protect, admins, dismissal_restrictions_branch_protect_users,
         ssphp.score.non_compliant_fields, ssphp.score.score


``` ##################### end dashboard query ##################### ```
| stats count as ssphp.score.denominator,
        sum(eval(if('ssphp.score.score'<100,1,0))) as ssphp.score.numerator,
        values(ssphp.service.name) as ssphp.service.name,
        values(ssphp.service.display_name) as ssphp.service.display_name,
        values(ssphp.service.group) as ssphp.service.group,
        values(ssphp.service.portfolio) as ssphp.service.portfolio,
        values(ssphp.service.division) as ssphp.service.division
        by ssphp.service.id, repo_name
        
| eval ssphp.score.score=if('ssphp.score.numerator'>0,"0","100")
       

``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id="github_001_cis_1-1-5",
       ssphp.use_case.title=upper(substr(mvindex(split('ssphp.use_case.id',"_"),0),1,1)).substr(mvindex(split('ssphp.use_case.id',"_"),0),2) . " [CIS ".replace(mvindex(split('ssphp.use_case.id',"_"),-1),"-",".") . "]",
       ssphp.use_case.savedsearch="ssphp_use_case_" . 'ssphp.use_case.id' . "_svc{{environment}}",
       ssphp.use_case.version.number="1.0.1",
       ssphp.use_case.version.last_changed_date="2024-06-24",
       ssphp.use_case.version.last_changed_by="Sam Pritchard",
       ssphp.use_case.group="GITHUB",
       ssphp.use_case.group_name="REPOS",
       ssphp.use_case.category="REPOS",
       ssphp.resource.id='repo_name',
       ssphp.resource.name='repo_name',
       ssphp.resource.type="github/repo"

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5"

| eval ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="In order to be compliant, repositories must have branch protection on and only trusted users should be allowed to dismiss code change reviews."

| search ssphp.service.id!="-"

`ssphp_use_case_add_cis_metadata_github{{environment}}`

`ssphp_use_case_write{{environment}}`

"""


###################### FOUNDATIONAL SYSTEM VERSION ######################
[ssphp_use_case_github_001_cis_1-1-5_fs{{environment}}]
cron_schedule = 55 5 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

| `ssphp_use_case_github{{environment}}("*/branches/*/protection","/repos/*/rules/branches/*")`

| fields repo_name, http_status_branch_protect, http_status_rules, 
         admins, dismissal_restrictions_branch_protect, ```dismissal_restrictions_branch_protect_apps, dismissal_restrictions_branch_protect_teams,``` dismissal_restrictions_branch_protect_users,
         http_status_rules, dismissal_restrictions_rules

| fillnull value="-" dismissal_restrictions_branch_protect, ```dismissal_restrictions_branch_protect_apps, dismissal_restrictions_branch_protect_teams,``` dismissal_restrictions_branch_protect_users, dismissal_restrictions_rules

``` ******************** USE CASE CAVEATS ***********************
- For PR dismissal by configuration in *Branch Protection*, we are only checking that the USERS permitted to do this are in the list of Repo/Org admins. This means that we are not checking that users in 'Teams' or 'Apps' are configured to be able to dismiss restrictions.
- We are not even attempting to trap dismissal bypass where it is configured as *Rules*
******************** IN OTHER WORDS, THIS USE CASE CURRENTLY ONLY CHECKS THAT NO USERS WHO ARE NO ADMINS HAVE BEEN CONFIGURED USING BRANCH PROTECTION TO BYPASS PRs *****************
```

| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if(dismissal_restrictions_branch_protect="-",
                                            mvappend('ssphp.score.non_compliant_fields',"dismissal_restrictions_branch_protect"),
                                            'ssphp.score.non_compliant_fields'),
                                            
       temp=mvdedup(mvappend('admins','dismissal_restrictions_branch_protect_users')),
       ssphp.score.non_compliant_fields=if((dismissal_restrictions_branch_protect_users!="-" AND mvcount('admins')!=mvcount('temp')),
                                            mvappend('ssphp.score.non_compliant_fields',"dismissal_restrictions_branch_protect_users"),
                                            'ssphp.score.non_compliant_fields')

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="1",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| fields full_repo_name, dismissal_restrictions_branch_protect, admins, dismissal_restrictions_branch_protect_users,
         ssphp.score.non_compliant_fields, ssphp.score.score


``` ##################### end dashboard query ##################### ```
| stats count as ssphp.score.denominator,
        sum(eval(if('ssphp.score.score'<100,1,0))) as ssphp.score.numerator

| eval ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

       

``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id="github_001_cis_1-1-5",
       ssphp.use_case.title=upper(substr(mvindex(split('ssphp.use_case.id',"_"),0),1,1)).substr(mvindex(split('ssphp.use_case.id',"_"),0),2) . " [CIS ".replace(mvindex(split('ssphp.use_case.id',"_"),-1),"-",".") . "]",
       ssphp.use_case.savedsearch="ssphp_use_case_" . 'ssphp.use_case.id' . "_fs{{environment}}",
       ssphp.use_case.version.number="1.0.1",
       ssphp.use_case.version.last_changed_date="2024-06-24",
       ssphp.use_case.version.last_changed_by="Sam Pritchard",
       ssphp.source.service="GITHUB",
       ssphp.source.service_name="REPOS",
       ssphp.use_case.notes=""

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5"

| eval ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="In order to be compliant, repositories must have branch protection on and only trusted users should be allowed to dismiss code change reviews."

`ssphp_use_case_add_cis_metadata_github{{environment}}`

`ssphp_use_case_write{{environment}}`

"""
