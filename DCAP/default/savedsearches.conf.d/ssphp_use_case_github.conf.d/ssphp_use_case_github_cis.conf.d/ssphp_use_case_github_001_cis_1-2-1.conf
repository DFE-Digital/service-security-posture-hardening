###################### SERVICE VERSION ######################
[ssphp_use_case_github_001_cis_1-2-1_svc{{environment}}]
cron_schedule = 55 5 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

| `ssphp_use_case_github{{environment}}("github:*")`

| rename full_name as repo_name
| eval repo_name="/".'repo_name',
       org=mvindex(split('repo_name',"/"),1)
| fields repo_name, org

| join type=outer repo_name
        [| `ssphp_use_case_github{{environment}}("/repos/*/SECURITY.md")`
         | rename ssphp_http_status as ssphp_http_status_repo_found, full_repo_name as repo_name
         | table repo_name, ssphp_http_status_repo_found]
         
| fillnull value="404" ssphp_http_status_repo_found
| fields repo_name, org, ssphp_http_status_repo_found

| eventstats values(eval(if(like('repo_name',"%/.github"),'ssphp_http_status_repo_found',null()))) as org_http_status by org

| fillnull value="404" org_http_status

`ssphp_use_case_add_service_metadata_github{{environment}}` 

| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if('ssphp_http_status_repo_found'="200" OR 'org_http_status'="200",
                                           'ssphp.score.non_compliant_fields',
                                           mvappend('ssphp.score.non_compliant_fields',"ssphp_http_status_repo_found","org_http_status"))

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="2",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| fields ssphp.service.*,
         repo_name, ssphp_http_status_repo_found, org, org_http_status,
         ssphp.score.score, ssphp.score.non_compliant_fields


``` ##################### replace with dashboard filter ##################### ```

``` ##################### end dashboard query ##################### ```


| stats count as ssphp.score.denominator,
        sum(eval(if('ssphp.score.score'<100,1,0))) as ssphp.score.numerator,
        values(ssphp.service.*) as ssphp.service.*,
        by repo_name
        
| eval ssphp.score.score=if('ssphp.score.numerator'>0,"0","100")
       

``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id="github_001_cis_1-2-1",
       ssphp.use_case.title=upper(substr(mvindex(split('ssphp.use_case.id',"_"),0),1,1)).substr(mvindex(split('ssphp.use_case.id',"_"),0),2) . " [CIS ".replace(mvindex(split('ssphp.use_case.id',"_"),-1),"-",".") . "]",
       ssphp.use_case.savedsearch="ssphp_use_case_" . 'ssphp.use_case.id' . "_svc{{environment}}",
       ssphp.use_case.version.number="1.0.5",
       ssphp.use_case.version.last_changed_date="2024-11-25",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.use_case.group="GITHUB",
       ssphp.use_case.group_name="REPOS",
       ssphp.use_case.category="REPOS",
       ssphp.resource.id='repo_name',
       ssphp.resource.name='repo_name',
       ssphp.resource.type="github/repo",
       ssphp.assessment.source="Github"

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5"

| eval ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="In order to be compliant, repositories must have a security.md file. This file can either be in the repo or in the organisation."

| eval SSPHP_UID=md5('ssphp.use_case.category'."|".'ssphp.service.id'."|".'ssphp.use_case.id'."|".'ssphp.resource.id')

`ssphp_use_case_add_cis_metadata_github{{environment}}`

`ssphp_use_case_write{{environment}}`

"""


###################### FOUNDATIONAL SYSTEM VERSION ######################
[ssphp_use_case_github_001_cis_1-2-1_fs{{environment}}]
cron_schedule = 55 5 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 1
search = """

| `ssphp_use_case_github{{environment}}("github:*")`

| rename full_name as repo_name
| eval repo_name="/".'repo_name',
       org=mvindex(split('repo_name',"/"),1)
| fields repo_name, org

| join type=outer repo_name
        [| `ssphp_use_case_github{{environment}}("/repos/*/SECURITY.md")`
         | rename ssphp_http_status as ssphp_http_status_repo_found, full_repo_name as repo_name
         | table repo_name, ssphp_http_status_repo_found]
         
| fillnull value="404" ssphp_http_status_repo_found
| fields repo_name, org, ssphp_http_status_repo_found

| eventstats values(eval(if(like('repo_name',"%/.github"),'ssphp_http_status_repo_found',null()))) as org_http_status by org

| fillnull value="404" org_http_status


| makemv ssphp.score.non_compliant_fields
| eval ssphp.score.non_compliant_fields=if('ssphp_http_status_repo_found'="200" OR 'org_http_status'="200",
                                           'ssphp.score.non_compliant_fields',
                                           mvappend('ssphp.score.non_compliant_fields',"ssphp_http_status_repo_found","org_http_status"))

| eval ssphp.score.numerator=coalesce(mvcount('ssphp.score.non_compliant_fields'),"0"),
       ssphp.score.denominator="2",
       ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')

| fields repo_name, ssphp_http_status_repo_found, org, org_http_status,
         ssphp.score.score, ssphp.score.non_compliant_fields


``` ##################### end dashboard query ##################### ```
| stats count as ssphp.score.denominator,
        sum(eval(if('ssphp.score.score'<100,1,0))) as ssphp.score.numerator

| eval ssphp.score.score=floor(('ssphp.score.denominator'-'ssphp.score.numerator')*100/'ssphp.score.denominator')



``` ##################### add metadata ##################### ```
| eval SSPHP_RUN=round(now())

| eval ssphp.use_case.id="github_001_cis_1-2-1",
       ssphp.use_case.title=upper(substr(mvindex(split('ssphp.use_case.id',"_"),0),1,1)).substr(mvindex(split('ssphp.use_case.id',"_"),0),2) . " [CIS ".replace(mvindex(split('ssphp.use_case.id',"_"),-1),"-",".") . "]",
       ssphp.use_case.savedsearch="ssphp_use_case_" . 'ssphp.use_case.id' . "_fs{{environment}}",
       ssphp.use_case.version.number="1.0.0",
       ssphp.use_case.version.last_changed_date="2024-07-01",
       ssphp.use_case.version.last_changed_by="Ian Pearl",
       ssphp.source.service="GITHUB",
       ssphp.source.service_name="REPOS",
       ssphp.use_case.notes=""

| eval ssphp.risk.expectancy="5",
       ssphp.risk.impact="5"

| eval ssphp.score.ciso_priority="1",
       ssphp.score.threshold.green="99",
       ssphp.score.threshold.orange="-",
       ssphp.score.threshold.red="-",
       ssphp.score.color=case('ssphp.score.score'>'ssphp.score.threshold.green',"green",1==1,"red"),
       ssphp.score.scoring_narrative="In order to be compliant, repositories must have a security.md file. This file can either be in the repo or in the organisation."

`ssphp_use_case_add_cis_metadata_github{{environment}}`

`ssphp_use_case_write{{environment}}`

"""
