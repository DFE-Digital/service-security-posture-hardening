[ssphp_use_case_ado_001{{environment}}]
definition = """

index="main" sourcetype="ADO" ```(SSPHP_DEBUG.type="fn projects_list" OR SSPHP_DEBUG.type="fn git_repository_list" OR SSPHP_DEBUG.type="fn git_policy_configuration_get")``` SSPHP_DEBUG.type="fn *git_repository_list"
    [| search index="main" sourcetype="ADO" SSPHP_DEBUG.type="fn *git_repository_list"
     | where SSPHP_RUN!=0
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]

| eval org=lower(mvindex(split('url',"/"),3))
| rename id as repo_id, project.* as project_*, name as repo_name, defaultBranch as repo_defaultBranch
| table org, 
        project_id, project_name, project_state, project_visibility, 
        repo_id, repo_name, repo_defaultBranch

| eval repo_policy_key='org'."::".'project_id'."::".'repo_id'
| join type=outer repo_policy_key max=0
    [| search index="main" sourcetype="ADO" SSPHP_DEBUG.type="fn policy_configuration_get"
         [| search index="main" sourcetype="ADO" SSPHP_DEBUG.type="fn policy_configuration_get"
          | where SSPHP_RUN!=0
          | stats max(SSPHP_RUN) as SSPHP_RUN
          | return SSPHP_RUN]
     | fields - SSPHP_*, punct, index, source, sourcetype, splunk_*, host, linecount, _raw, _time
     | eval repo_policy_org=lower(mvindex(split('url',"/"),3)),
            repo_policy_project_id=lower(mvindex(split('url',"/"),4))
     | table repo_policy_org, repo_policy_project_id, id, type.displayName*, settings.scope{}.matchKind, settings.scope{}.refName, settings.scope{}.repositoryId, revision, *

     | join type=outer repo_policy_project_id
         [| search index="main" sourcetype="ADO" SSPHP_DEBUG.type="fn git_repository_list"
              [| search index="main" sourcetype="ADO" SSPHP_DEBUG.type="fn git_repository_list"
               | where SSPHP_RUN!=0
               | stats max(SSPHP_RUN) as SSPHP_RUN
               | return SSPHP_RUN]
          | fields - SSPHP_*, punct, index, source, sourcetype, splunk_*, host, linecount, _raw, _time
          | table name, id, defaultBranch, project.name, project.id, project.revision, project.state, project.visibility, url, *
          | rename project.id as repo_policy_project_id
          | stats values(id) as settings_scope_repo_project_id by repo_policy_project_id]

     | eval settings_scope_repo_project_id=split('settings_scope_repo_project_id'," ")

     | eval repository_scope=if('settings.scope{}.repositoryId'="null",'settings_scope_repo_project_id','settings.scope{}.repositoryId')
     | table repo_policy_org, repo_policy_project_id, id, type.displayName*, settings.scope{}.matchKind, settings.scope{}.refName, ```settings.scope{}.repositoryId, settings_scope_repo_project_id,``` repository_scope, revision, *
     | mvexpand repository_scope
     | eval repo_policy_key='repo_policy_org'."::".'repo_policy_project_id'."::".'repository_scope'

     | table repo_policy_key, repo_policy_org, repo_policy_project_id, id, type.displayName*, settings.scope{}.matchKind, settings.scope{}.refName, settings.scope{}.repositoryId, repository_scope, revision, type.displayName, settings.scope{}.matchKind, settings.scope{}.refName, *]


| where (lower('isBlocking')="true" AND lower('isDeleted')="false" AND lower('isEnabled')="true") OR (isnull(isBlocking) AND isnull(isDeleted) AND isnull(isEnabled))

| table org, 
        project_id, project_name, project_state, project_visibility, 
        repo_id, repo_name, repo_defaultBranch, type.displayName, revision, settings.scope{}.matchKind, settings.scope{}.refName, settings.scope{}.repositoryId, *

"""

iseval = 0
