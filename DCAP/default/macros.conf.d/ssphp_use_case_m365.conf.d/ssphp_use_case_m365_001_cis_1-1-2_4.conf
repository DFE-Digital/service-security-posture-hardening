[ssphp_use_case_m365_001_cis_1-1-2_4{{environment}}]
definition = """

`ssphp_metrics_data_index{{environment}}` sourcetype="SSPHP.AAD.user" earliest=-7d@d latest=now
    [| search index=*data* sourcetype="SSPHP.AAD.user" earliest=-7d@d latest=now
     | stats max(SSPHP_RUN) as SSPHP_RUN
     | return SSPHP_RUN]

| spath id
| spath userPrincipalName
```| spath isPrivileged | search isPrivileged=true```
| spath userType
| spath transitiveMemberOf{}.@odata.type
| spath transitiveMemberOf{}.displayName
| spath transitiveMemberOf{}.id
 
| makemv admin_roles 
| makemv non_admin_roles
| foreach mode=multivalue transitiveMemberOf{}.displayName
    [| eval admin_roles=if(in(lower(<<ITEM>>), "application administrator", "authentication administrator", "billing administrator", "cloud application administrator", "conditional access administrator", "exchange administrator", "global administrator", ```"global reader",``` "helpdesk administrator",
                "password administrator", "privileged authentication administrator", "privileged role administrator", "security administrator", "sharepoint administrator", "user administrator"), mvappend('admin_roles',<<ITEM>>), 'admin_roles'),
            non_admin_roles=if(in(lower(<<ITEM>>), "application administrator", "authentication administrator", "billing administrator", "cloud application administrator", "conditional access administrator", "exchange administrator", "global administrator", ```"global reader",``` "helpdesk administrator", "password administrator", "privileged authentication administrator", "privileged role administrator", "security administrator", "sharepoint administrator", "user administrator"), 'non_admin_roles', mvappend('non_admin_roles',<<ITEM>>))
    ]
 
| fields id, userPrincipalName, isPrivileged, userType, ```transitiveMemberOf{}.@odata.type, ```admin_roles, non_admin_roles, matched_cap, transitiveMemberOf{}.displayName, transitiveMemberOf{}.id, conditionalAccessPolicies{}.id, conditionalAccessPolicies{}.displayName, conditionalAccessPolicies{}.state


| eval member=mvzip('transitiveMemberOf{}.id','transitiveMemberOf{}.displayName',"::")
| eval caps=mvzip('conditionalAccessPolicies{}.id','conditionalAccessPolicies{}.displayName',"::"),
       caps=mvzip('caps','conditionalAccessPolicies{}.state',"::")
      
| fields id, userPrincipalName, isPrivileged, userType, admin_roles, non_admin_roles, matched_cap, member, caps
 
| mvexpand caps
 
| eval cap_id=mvindex(split('caps',"::"),0),
       cap_display_name=mvindex(split('caps',"::"),1),
       cap_status=mvindex(split('caps',"::"),2)
      
| join type=outer cap_id max=1
    [| `ssphp_use_case_msgraph{{environment}}("/v1.0/identity/conditionalAccess/policies")`
 
     | spath grantControls
     | spath grantControls.authenticationStrength
     | spath grantControls.authenticationStrength.id
 
     | where "grantControls.authenticationStrength.id"="00000000-0000-0000-0000-000000000002"  OR  
             "grantControls.authenticationStrength.id"="00000000-0000-0000-0000-000000000003" OR 
             "grantControls.authenticationStrength.id"="00000000-0000-0000-0000-000000000004" OR  
             like('grantControls.builtInControls{}' ,"%mfa%")    ``` policies with MFA enabled in them ```
 
     | eval cap_mfa_enabled="true"
     | rename id as cap_id
     | dedup cap_id, displayName, cap_mfa_enabled
     | table cap_id, displayName, cap_mfa_enabled
    ]
 
| fillnull value="false" cap_mfa_enabled

| stats values(userPrincipalName) as userPrincipalName, values(admin_roles) as admin_roles, values(non_admin_roles) as non_admin_roles, list(cap_display_name) as cap_display_name, list(cap_mfa_enabled) as cap_mfa_enabled by id

`ssphp_fs_use_case_exemption_breakglass_accounts`

| makemv ssphp.score.non_compliant_fields
| eval account_has_mfa=if(mvcount(mvfilter(match('cap_mfa_enabled',"true")))>0,"true","false"),
       ssphp.score.non_compliant_fields=case('is_breakglass'="true", 'ssphp.score.non_compliant_fields',
                                             'account_has_mfa'="true", 'ssphp.score.non_compliant_fields',
                                             1==1, mvappend('ssphp.score.non_compliant_fields',"account_has_mfa"))


| fields userPrincipalName, id, admin_roles, non_admin_roles, cap_display_name, cap_mfa_enabled, account_has_mfa, is_breakglass, ssphp.score.non_compliant_fields

"""

iseval = 0
