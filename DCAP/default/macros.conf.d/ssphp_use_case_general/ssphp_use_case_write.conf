[ssphp_use_case_write{{environment}}]
definition = """

| lookup ssphp_bdmc_fbp.csv portfolio AS ssphp.service.portfolio, service_line AS ssphp.service.service_line, product AS ssphp.service.product OUTPUT id as ssphp.service.id
| fillnull value="Unassigned" ssphp.service.id

| lookup ssphp_service_ciso_levels.csv id as ssphp.service.id OUTPUT ciso_level as ssphp.service.ciso_level
| fillnull value="1" ssphp.service.ciso_level

| join type=outer ssphp.use_case.id, ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product
    [| search index="ssphp_metrics_exemptions{{environment}}" earliest=0 latest=now

     | fields ssphp.*
     | rename ssphp.exemption.service.* as ssphp.service.*, ssphp.exemption.use_case.id as ssphp.use_case.id
     
     
     ```| eval line=replace('ssphp.exemption.resource.id'."::".'ssphp.exemption.authorisation.user'."::".'ssphp.exemption.authorisation.reason'."::".strftime(_time,"%Y-%m-%d %H:%M:%S")."::".'ssphp.exemption.status'," ","~~~")```
     | eval exemption=json_object("resource_id",'ssphp.exemption.resource.id',
                                  "authorisation_user",'ssphp.exemption.authorisation.user',
                                  "authorisation_reason",'ssphp.exemption.authorisation.reason',
                                  "authorisation_date",strftime(_time,"%Y-%m-%d %H:%M:%S"),
                                  "status",'ssphp.exemption.status')
     
     | stats latest(*) as * by ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product, ssphp.use_case.id, ssphp.exemption.resource.id
     | stats values(exemption) as exemptions_product by ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product, ssphp.use_case.id

     | table ssphp.use_case.id, ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product, exemptions_json, exemptions_product
     ]
     
| eval exemptions_product=replace('exemptions_product',"} {","}~~~{")```,
       exemptions_product=split('exemptions_product',"~~~")```
| makemv exemptions_product allowempty=t delim="~~~"
       
| foreach exemptions_product mode=multivalue
    [| eval rule=lower(replace(mvindex(split(mvindex(split(<<ITEM>>,","),0),":"),1),"\"","")),
            status=replace(replace(mvindex(split(mvindex(split(<<ITEM>>,","),4),":"),1),"\"",""),"}",""),
            exemptions=if(match(lower('ssphp.resource.id'),'rule') AND status="exempt",
                            mvappend('exemptions',<<ITEM>>),
                            'exemptions')]
| eval status_json=if(mvcount('exemptions')>0,"exempt","comply")
| eval exemptions_json=json_object("exemptions",mv_to_json_array('exemptions',true()),"status",'status_json')


| eval ssphp.score.color=case('ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="1","red",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="2","orange",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="3","white",
                              1==1,'ssphp.score.color'),
       ssphp.score.remediation_priority = 28 - 'ssphp.score.remediation_priority'  ```remediation priorities are 2-27, 27 being the highest priority, but need to be reversed because that's not how humans think about priorities```

| fields *
| makejson SSPHP_RUN, SSPHP_UID, ssphp.* output=temp_raw

| eval complete_json=json_set('temp_raw',"ssphp.exemption",json('exemptions_json'))

| eval _time=SSPHP_RUN
| rename complete_json as _raw
| fields _time, _raw 
| collect output_format=hec testmode=f addinfo=f index="ssphp_metrics_summary{{environment}}"

"""

iseval = 0

 

[ssphp_asset_inventory_write{{environment}}(1)]
definition = """

| eval SSPHP_RUN=now()

| fields *
| makejson SSPHP_RUN, ssphp.* output=temp_raw 
| eval _time=SSPHP_RUN
| rename temp_raw as _raw
| fields _time, _raw 
| collect output_format=hec testmode=f addinfo=f index="ssphp_asset_inventory{{environment}}"

| stats values(_time) as SSPHP_RUN
| eval inventory_type="$type$"
| table SSPHP_RUN, inventory_type
| outputlookup createinapp=true append=true ssphp_last_asset_inventory_ssphp_run{{environment}}.csv

"""

args = type
iseval = 0


[ssphp_use_case_no_write{{environment}}]
definition = """

| lookup ssphp_bdmc_fbp.csv portfolio AS ssphp.service.portfolio, service_line AS ssphp.service.service_line, product AS ssphp.service.product OUTPUT id as ssphp.service.id
| fillnull value="Unassigned" ssphp.service.id

| lookup ssphp_service_ciso_levels.csv id as ssphp.service.id OUTPUT ciso_level as ssphp.service.ciso_level
| fillnull value="1" ssphp.service.ciso_level

| join type=outer ssphp.use_case.id, ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product
    [| search index="ssphp_metrics_exemptions{{environment}}" earliest=0 latest=now

     | fields ssphp.*
     | rename ssphp.exemption.service.* as ssphp.service.*, ssphp.exemption.use_case.id as ssphp.use_case.id
     
     
     ```| eval line=replace('ssphp.exemption.resource.id'."::".'ssphp.exemption.authorisation.user'."::".'ssphp.exemption.authorisation.reason'."::".strftime(_time,"%Y-%m-%d %H:%M:%S")."::".'ssphp.exemption.status'," ","~~~")```
     | eval exemption=json_object("resource_id",'ssphp.exemption.resource.id',
                                  "authorisation_user",'ssphp.exemption.authorisation.user',
                                  "authorisation_reason",'ssphp.exemption.authorisation.reason',
                                  "authorisation_date",strftime(_time,"%Y-%m-%d %H:%M:%S"),
                                  "status",'ssphp.exemption.status')
     
     | stats latest(*) as * by ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product, ssphp.use_case.id, ssphp.exemption.resource.id
     | stats values(exemption) as exemptions_product by ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product, ssphp.use_case.id

     | table ssphp.use_case.id, ssphp.service.portfolio, ssphp.service.service_line, ssphp.service.product, exemptions_json, exemptions_product
     ]
     
| eval exemptions_product=replace('exemptions_product',"} {","}~~~{")```,
       exemptions_product=split('exemptions_product',"~~~")```
| makemv exemptions_product allowempty=t delim="~~~"
       
| foreach exemptions_product mode=multivalue
    [| eval rule=lower(replace(mvindex(split(mvindex(split(<<ITEM>>,","),0),":"),1),"\"","")),
            status=replace(replace(mvindex(split(mvindex(split(<<ITEM>>,","),4),":"),1),"\"",""),"}",""),
            exemptions=if(match(lower('ssphp.resource.id'),'rule') AND status="exempt",
                            mvappend('exemptions',<<ITEM>>),
                            'exemptions')]
| eval status_json=if(mvcount('exemptions')>0,"exempt","comply")
| eval exemptions_json=json_object("exemptions",mv_to_json_array('exemptions',true()),"status",'status_json')


| eval ssphp.score.color=case('ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="1","red",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="2","orange",
                              'ssphp.score.color'="red" AND 'ssphp.score.ciso_priority'="3","white",
                              1==1,'ssphp.score.color'),
       ssphp.score.remediation_priority = 28 - 'ssphp.score.remediation_priority'  ```remediation priorities are 2-27, 27 being the highest priority, but need to be reversed because that's not how humans think about priorities```

| fields *
| makejson SSPHP_RUN, SSPHP_UID, ssphp.* output=temp_raw

| eval complete_json=json_set('temp_raw',"ssphp.exemption",json('exemptions_json'))

| eval _time=SSPHP_RUN
| rename complete_json as _raw
| fields _time, _raw 
```| collect output_format=hec testmode=f addinfo=f index="ssphp_metrics_summary{{environment}}"```

"""

iseval = 0