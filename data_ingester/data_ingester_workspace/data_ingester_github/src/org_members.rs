use anyhow::{Context, Result};
use data_ingester_splunk::splunk::ToHecEvents;
use graphql_client::{GraphQLQuery, Response};
use serde::Serialize;

/// Containing for OrgMembers
#[derive(Default, Debug)]
pub(crate) struct OrgMembers(Vec<OrgMember>);

impl OrgMembers {
    /// Extend the members from a [org_member_query::ResponseData]
    pub(crate) fn extend(
        &mut self,
        response: Response<org_member_query::ResponseData>,
    ) -> Result<()> {
        let members: OrgMembers = response.try_into().context("Convert to OrgMembers")?;
        self.0.extend(members.0);
        Ok(())
    }
}

/// Hec Event descriptor for Org Members
impl ToHecEvents for &OrgMembers {
    type Item = OrgMember;

    fn source(&self) -> &str {
        "graphql:org_members_query"
    }

    fn sourcetype(&self) -> &str {
        "github"
    }

    fn collection<'i>(&'i self) -> Box<dyn Iterator<Item = &'i Self::Item> + 'i> {
        Box::new(self.0.iter())
    }
    fn ssphp_run_key(&self) -> &str {
        "github"
    }
}

/// Org member representation sent to Splunk
#[derive(Serialize, Default, Debug)]
pub(crate) struct OrgMember {
    organisation: String,
    login: String,
    email: String,
    role: org_member_query::OrganizationMemberRole,
}

/// Convert a [org_member_query::ResponseData] to [OrgMembers]
impl TryFrom<Response<org_member_query::ResponseData>> for OrgMembers {
    type Error = anyhow::Error;
    fn try_from(value: Response<org_member_query::ResponseData>) -> Result<Self> {
        let organization = value
            .data
            .and_then(|data| data.organization)
            .context("OrgQueryOrganization should be present")?;
        let organization_login = organization.login.as_str();
        let members_with_roles = organization
            .members_with_role
            .edges
            .context("Expect member_with_role edges to be present")?;

        let mut org_members = Vec::with_capacity(members_with_roles.len());

        for member_with_role in members_with_roles.iter().flatten() {
            let role = member_with_role
                .role
                .as_ref()
                .context("Role to be present")?;
            let member = member_with_role
                .node
                .as_ref()
                .context("Expect member to be present")?;
            let org_member = OrgMember {
                organisation: organization_login.to_owned(),
                login: member.login.to_owned(),
                email: member.email.to_owned(),
                role: role.clone(),
            };
            org_members.push(org_member);
        }
        Ok(OrgMembers(org_members))
    }
}

impl Default for org_member_query::OrganizationMemberRole {
    fn default() -> Self {
        Self::MEMBER
    }
}

/// Autogenerated structs from 'src/org_member_query.graphql'
#[derive(GraphQLQuery)]
#[graphql(
    schema_path = "src/schema.docs.graphql",
    query_path = "src/org_member_query.graphql",
    response_derives = "Clone, Debug, Default",
    variables_derives = "Clone, Debug"
)]
pub(crate) struct OrgMemberQuery;
